(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["rnaplot"] = factory();
	else
		root["rnaplot"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "../node_modules/base64-js/index.js":
/*!******************************************!*\
  !*** ../node_modules/base64-js/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack://%5Bname%5D/../node_modules/base64-js/index.js?");

/***/ }),

/***/ "../node_modules/ieee754/index.js":
/*!****************************************!*\
  !*** ../node_modules/ieee754/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack://%5Bname%5D/../node_modules/ieee754/index.js?");

/***/ }),

/***/ "../node_modules/node-libs-browser/node_modules/buffer/index.js":
/*!**********************************************************************!*\
  !*** ../node_modules/node-libs-browser/node_modules/buffer/index.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"../node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"../node_modules/ieee754/index.js\")\nvar isArray = __webpack_require__(/*! isarray */ \"../node_modules/node-libs-browser/node_modules/isarray/index.js\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ \"../node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack://%5Bname%5D/../node_modules/node-libs-browser/node_modules/buffer/index.js?");

/***/ }),

/***/ "../node_modules/node-libs-browser/node_modules/isarray/index.js":
/*!***********************************************************************!*\
  !*** ../node_modules/node-libs-browser/node_modules/isarray/index.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n\n\n//# sourceURL=webpack://%5Bname%5D/../node_modules/node-libs-browser/node_modules/isarray/index.js?");

/***/ }),

/***/ "../node_modules/slugid/index.js":
/*!***************************************!*\
  !*** ../node_modules/slugid/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// The MIT License (MIT)\n//\n// Copyright (c) 2014 Jonas Finnemann Jensen\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nmodule.exports = __webpack_require__(/*! ./slugid */ \"../node_modules/slugid/slugid.js\");\n\n\n//# sourceURL=webpack://%5Bname%5D/../node_modules/slugid/index.js?");

/***/ }),

/***/ "../node_modules/slugid/slugid.js":
/*!****************************************!*\
  !*** ../node_modules/slugid/slugid.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(Buffer) {// The MIT License (MIT)\n//\n// Copyright (c) 2014 Jonas Finnemann Jensen\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nvar uuid = __webpack_require__(/*! uuid */ \"../node_modules/uuid/uuid.js\");\n\n/**\n * Returns the given uuid as a 22 character slug. This can be a regular v4\n * slug or a \"nice\" slug.\n */\nexports.encode = function(uuid_) {\n  var bytes   = uuid.parse(uuid_);\n  var base64  = (new Buffer(bytes)).toString('base64');\n  var slug = base64\n              .replace(/\\+/g, '-')  // Replace + with - (see RFC 4648, sec. 5)\n              .replace(/\\//g, '_')  // Replace / with _ (see RFC 4648, sec. 5)\n              .substring(0, 22);    // Drop '==' padding\n  return slug;\n};\n\n/**\n * Returns the uuid represented by the given v4 or \"nice\" slug\n */\nexports.decode = function(slug) {\n  var base64 = slug\n                  .replace(/-/g, '+')\n                  .replace(/_/g, '/')\n                  + '==';\n  return uuid.unparse(new Buffer(base64, 'base64'));\n};\n\n/**\n * Returns a randomly generated uuid v4 compliant slug\n */\nexports.v4 = function() {\n  var bytes   = uuid.v4(null, new Buffer(16));\n  var base64  = bytes.toString('base64');\n  var slug = base64\n              .replace(/\\+/g, '-')  // Replace + with - (see RFC 4648, sec. 5)\n              .replace(/\\//g, '_')  // Replace / with _ (see RFC 4648, sec. 5)\n              .substring(0, 22);    // Drop '==' padding\n  return slug;\n};\n\n/** \n * Returns a randomly generated uuid v4 compliant slug which conforms to a set\n * of \"nice\" properties, at the cost of some entropy. Currently this means one\n * extra fixed bit (the first bit of the uuid is set to 0) which guarantees the\n * slug will begin with [A-Za-f]. For example such slugs don't require special\n * handling when used as command line parameters (whereas non-nice slugs may\n * start with `-` which can confuse command line tools).\n *\n * Potentially other \"nice\" properties may be added in future to further\n * restrict the range of potential uuids that may be generated.\n */\nexports.nice = function() {\n  var bytes   = uuid.v4(null, new Buffer(16));\n  bytes[0] = bytes[0] & 0x7f;  // unset first bit to ensure [A-Za-f] first char\n  var base64  = bytes.toString('base64');\n  var slug = base64\n              .replace(/\\+/g, '-')  // Replace + with - (see RFC 4648, sec. 5)\n              .replace(/\\//g, '_')  // Replace / with _ (see RFC 4648, sec. 5)\n              .substring(0, 22);    // Drop '==' padding\n  return slug;\n};\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node-libs-browser/node_modules/buffer/index.js */ \"../node_modules/node-libs-browser/node_modules/buffer/index.js\").Buffer))\n\n//# sourceURL=webpack://%5Bname%5D/../node_modules/slugid/slugid.js?");

/***/ }),

/***/ "../node_modules/uuid/rng-browser.js":
/*!*******************************************!*\
  !*** ../node_modules/uuid/rng-browser.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {\nvar rng;\n\nvar crypto = global.crypto || global.msCrypto; // for IE 11\nif (crypto && crypto.getRandomValues) {\n  // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto\n  // Moderately fast, high quality\n  var _rnds8 = new Uint8Array(16);\n  rng = function whatwgRNG() {\n    crypto.getRandomValues(_rnds8);\n    return _rnds8;\n  };\n}\n\nif (!rng) {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var  _rnds = new Array(16);\n  rng = function() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return _rnds;\n  };\n}\n\nmodule.exports = rng;\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"../node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack://%5Bname%5D/../node_modules/uuid/rng-browser.js?");

/***/ }),

/***/ "../node_modules/uuid/uuid.js":
/*!************************************!*\
  !*** ../node_modules/uuid/uuid.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("//     uuid.js\n//\n//     Copyright (c) 2010-2012 Robert Kieffer\n//     MIT License - http://opensource.org/licenses/mit-license.php\n\n// Unique ID creation requires a high quality random # generator.  We feature\n// detect to determine the best RNG source, normalizing to a function that\n// returns 128-bits of randomness, since that's what's usually required\nvar _rng = __webpack_require__(/*! ./rng */ \"../node_modules/uuid/rng-browser.js\");\n\n// Maps for number <-> hex string conversion\nvar _byteToHex = [];\nvar _hexToByte = {};\nfor (var i = 0; i < 256; i++) {\n  _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n  _hexToByte[_byteToHex[i]] = i;\n}\n\n// **`parse()` - Parse a UUID into it's component bytes**\nfunction parse(s, buf, offset) {\n  var i = (buf && offset) || 0, ii = 0;\n\n  buf = buf || [];\n  s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {\n    if (ii < 16) { // Don't overflow!\n      buf[i + ii++] = _hexToByte[oct];\n    }\n  });\n\n  // Zero out remaining bytes if string was short\n  while (ii < 16) {\n    buf[i + ii++] = 0;\n  }\n\n  return buf;\n}\n\n// **`unparse()` - Convert UUID byte array (ala parse()) into a string**\nfunction unparse(buf, offset) {\n  var i = offset || 0, bth = _byteToHex;\n  return  bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]];\n}\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\n// random #'s we need to init node and clockseq\nvar _seedBytes = _rng();\n\n// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\nvar _nodeId = [\n  _seedBytes[0] | 0x01,\n  _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]\n];\n\n// Per 4.2.2, randomize (14 bit) clockseq\nvar _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;\n\n// Previous uuid creation time\nvar _lastMSecs = 0, _lastNSecs = 0;\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  var node = options.node || _nodeId;\n  for (var n = 0; n < 6; n++) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : unparse(b);\n}\n\n// **`v4()` - Generate random UUID**\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v4(options, buf, offset) {\n  // Deprecated - 'format' argument, as supported in v1.2\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options == 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || _rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ii++) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || unparse(rnds);\n}\n\n// Export public API\nvar uuid = v4;\nuuid.v1 = v1;\nuuid.v4 = v4;\nuuid.parse = parse;\nuuid.unparse = unparse;\n\nmodule.exports = uuid;\n\n\n//# sourceURL=webpack://%5Bname%5D/../node_modules/uuid/uuid.js?");

/***/ }),

/***/ "../node_modules/webpack/buildin/global.js":
/*!*************************************************!*\
  !*** ../node_modules/webpack/buildin/global.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack://%5Bname%5D/../node_modules/webpack/buildin/global.js?");

/***/ }),

/***/ "./scripts/naview/base.js":
/*!********************************!*\
  !*** ./scripts/naview/base.js ***!
  \********************************/
/*! exports provided: Base */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Base\", function() { return Base; });\n/* harmony import */ var _region_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./region.js */ \"./scripts/naview/region.js\");\n\nfunction Base() {\n  this.mate = null;\n  this.x = null;\n  this.y = null;\n  this.extracted = null;\n  this.region = new _region_js__WEBPACK_IMPORTED_MODULE_0__[\"Region\"]();\n}\n\nBase.prototype.getMate = function () {\n  return this.mate;\n};\n\nBase.prototype.setMate = function (mate) {\n  this.mate = mate;\n};\n\nBase.prototype.getX = function () {\n  return this.x;\n};\n\nBase.prototype.setX = function (x) {\n  this.x = x;\n};\n\nBase.prototype.getY = function () {\n  return this.y;\n};\n\nBase.prototype.setY = function (y) {\n  this.y = y;\n};\n\nBase.prototype.isExtracted = function () {\n  return this.extracted;\n};\n\nBase.prototype.setExtracted = function (extracted) {\n  this.extracted = extracted;\n};\n\nBase.prototype.getRegion = function () {\n  return this.region;\n};\n\nBase.prototype.setRegion = function (region) {\n  this.region = region;\n};\n\n//# sourceURL=webpack://%5Bname%5D/./scripts/naview/base.js?");

/***/ }),

/***/ "./scripts/naview/connection.js":
/*!**************************************!*\
  !*** ./scripts/naview/connection.js ***!
  \**************************************/
/*! exports provided: Connection */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Connection\", function() { return Connection; });\n/* harmony import */ var _loop_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./loop.js */ \"./scripts/naview/loop.js\");\n/* harmony import */ var _region_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./region.js */ \"./scripts/naview/region.js\");\n\n\nfunction Connection() {\n  this.loop = new _loop_js__WEBPACK_IMPORTED_MODULE_0__[\"Loop\"]();\n  this.region = new _region_js__WEBPACK_IMPORTED_MODULE_1__[\"Region\"](); // Start and end form the 1st base pair of the region.\n\n  this.start = null;\n  this.end = null;\n  this.xrad = null;\n  this.yrad = null;\n  this.angle = null; // True if segment between this connection and the\n  // next must be extruded out of the circle\n\n  this.extruded = null; // True if the extruded segment must be drawn long.\n\n  this.broken = null;\n  this._isNull = false;\n}\n\nConnection.prototype.isNull = function () {\n  return this._isNull;\n};\n\nConnection.prototype.setNull = function (isNull) {\n  this._isNull = isNull;\n};\n\nConnection.prototype.getLoop = function () {\n  return this.loop;\n};\n\nConnection.prototype.setLoop = function (loop) {\n  this.loop = loop;\n};\n\nConnection.prototype.getRegion = function () {\n  return this.region;\n};\n\nConnection.prototype.setRegion = function (region) {\n  this.region = region;\n};\n\nConnection.prototype.getStart = function () {\n  return this.start;\n};\n\nConnection.prototype.setStart = function (start) {\n  this.start = start;\n};\n\nConnection.prototype.getEnd = function () {\n  return this.end;\n};\n\nConnection.prototype.setEnd = function (end) {\n  this.end = end;\n};\n\nConnection.prototype.getXrad = function () {\n  return this.xrad;\n};\n\nConnection.prototype.setXrad = function (xrad) {\n  this.xrad = xrad;\n};\n\nConnection.prototype.getYrad = function () {\n  return this.yrad;\n};\n\nConnection.prototype.setYrad = function (yrad) {\n  this.yrad = yrad;\n};\n\nConnection.prototype.getAngle = function () {\n  return this.angle;\n};\n\nConnection.prototype.setAngle = function (angle) {\n  this.angle = angle;\n};\n\nConnection.prototype.isExtruded = function () {\n  return this.extruded;\n};\n\nConnection.prototype.setExtruded = function (extruded) {\n  this.extruded = extruded;\n};\n\nConnection.prototype.isBroken = function () {\n  return this.broken;\n};\n\nConnection.prototype.setBroken = function (broken) {\n  this.broken = broken;\n};\n\n//# sourceURL=webpack://%5Bname%5D/./scripts/naview/connection.js?");

/***/ }),

/***/ "./scripts/naview/loop.js":
/*!********************************!*\
  !*** ./scripts/naview/loop.js ***!
  \********************************/
/*! exports provided: Loop */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Loop\", function() { return Loop; });\n/* harmony import */ var _connection_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./connection.js */ \"./scripts/naview/connection.js\");\n\nfunction Loop() {\n  this.nconnection = null;\n  this.connections = [];\n  this._connections = [];\n  this.number = null;\n  this.depth = null;\n  this.mark = null;\n  this.x = null;\n  this.y = null;\n  this.radius = null;\n}\n\nLoop.prototype.getNconnection = function () {\n  return this.nconnection;\n};\n\nLoop.prototype.setNconnection = function (nconnection) {\n  this.nconnection = nconnection;\n};\n\nLoop.prototype.setConnection = function (i, c) {\n  if (c != null) {\n    this._connections[i] = c;\n  } else {\n    if (!this._connections[i]) {\n      this._connections[i] = new _connection_js__WEBPACK_IMPORTED_MODULE_0__[\"Connection\"]();\n    }\n\n    this._connections[i].setNull(true);\n  }\n};\n\nLoop.prototype.getConnection = function (i) {\n  var Connection = __webpack_require__(/*! ./connection */ \"./scripts/naview/connection.js\");\n\n  if (!this._connections[i]) {\n    this._connections[i] = new Connection();\n  }\n\n  var c = this._connections[i];\n\n  if (c.isNull()) {\n    return null;\n  } else {\n    return c;\n  }\n};\n\nLoop.prototype.addConnection = function (i, c) {\n  this._connections.push(c);\n};\n\nLoop.prototype.getNumber = function () {\n  return this.number;\n};\n\nLoop.prototype.setNumber = function (number) {\n  this.number = number;\n};\n\nLoop.prototype.getDepth = function () {\n  return this.depth;\n};\n\nLoop.prototype.setDepth = function (depth) {\n  this.depth = depth;\n};\n\nLoop.prototype.isMark = function () {\n  return this.mark;\n};\n\nLoop.prototype.setMark = function (mark) {\n  this.mark = mark;\n};\n\nLoop.prototype.getX = function () {\n  return this.x;\n};\n\nLoop.prototype.setX = function (x) {\n  this.x = x;\n};\n\nLoop.prototype.getY = function () {\n  return this.y;\n};\n\nLoop.prototype.setY = function (y) {\n  this.y = y;\n};\n\nLoop.prototype.getRadius = function () {\n  return this.radius;\n};\n\nLoop.prototype.setRadius = function (radius) {\n  this.radius = radius;\n};\n\n//# sourceURL=webpack://%5Bname%5D/./scripts/naview/loop.js?");

/***/ }),

/***/ "./scripts/naview/naview.js":
/*!**********************************!*\
  !*** ./scripts/naview/naview.js ***!
  \**********************************/
/*! exports provided: NAView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NAView\", function() { return NAView; });\n/* harmony import */ var _radloop_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./radloop.js */ \"./scripts/naview/radloop.js\");\n/* harmony import */ var _connection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./connection.js */ \"./scripts/naview/connection.js\");\n/* harmony import */ var _region_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./region.js */ \"./scripts/naview/region.js\");\n/* harmony import */ var _base_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base.js */ \"./scripts/naview/base.js\");\n/* harmony import */ var _loop_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./loop.js */ \"./scripts/naview/loop.js\");\n\n\n\n\n\nfunction NAView() {\n  this.ANUM = 9999.0;\n  this.MAXITER = 500;\n  this.bases = [];\n  this.nbase = null;\n  this.nregion = null;\n  this.loop_count = null;\n  this.root = new _loop_js__WEBPACK_IMPORTED_MODULE_4__[\"Loop\"]();\n  this.loops = [];\n  this.regions = [];\n  this.rlphead = new _radloop_js__WEBPACK_IMPORTED_MODULE_0__[\"Radloop\"]();\n  this.lencut = 0.8;\n  this.RADIUS_REDUCTION_FACTOR = 1.4; // show algorithm step by step\n\n  this.angleinc = null;\n  this._h = null; // private boolean noIterationFailureYet = true;\n\n  this.HELIX_FACTOR = 0.6;\n  this.BACKBONE_DISTANCE = 27;\n}\n\nNAView.prototype.naview_xy_coordinates = function (pair_table) {\n  var x = [];\n  var y = [];\n\n  if (pair_table.length === 0 || pair_table[0] === 0) {\n    return 0;\n  }\n\n  var i;\n  this.nbase = pair_table[0];\n  this.bases = [];\n\n  for (var index = 0; index < this.nbase + 1; index++) {\n    this.bases.push(new _base_js__WEBPACK_IMPORTED_MODULE_3__[\"Base\"]());\n  }\n\n  this.regions = [];\n\n  for (var index = 0; index < this.nbase + 1; index++) {\n    this.regions.push(new _region_js__WEBPACK_IMPORTED_MODULE_2__[\"Region\"]());\n  }\n\n  this.read_in_bases(pair_table);\n  this.rlphead = null;\n  this.find_regions();\n  this.loop_count = 0;\n  this.loops = [];\n\n  for (var index = 0; index < this.nbase + 1; index++) {\n    this.loops.push(new _loop_js__WEBPACK_IMPORTED_MODULE_4__[\"Loop\"]());\n  }\n\n  this.construct_loop(0);\n  this.find_central_loop();\n  this.traverse_loop(this.root, null);\n\n  for (i = 0; i < this.nbase; i++) {\n    x.push(100 + this.BACKBONE_DISTANCE * this.bases[i + 1].getX());\n    y.push(100 + this.BACKBONE_DISTANCE * this.bases[i + 1].getY());\n  }\n\n  return {\n    nbase: this.nbase,\n    x: x,\n    y: y\n  };\n};\n\nNAView.prototype.read_in_bases = function read_in_bases(pair_table) {\n  var i = null;\n  var npairs = null; // Set up an origin.\n\n  this.bases.push(new _base_js__WEBPACK_IMPORTED_MODULE_3__[\"Base\"]());\n  this.bases[0].setMate(0);\n  this.bases[0].setExtracted(false);\n  this.bases[0].setX(this.ANUM);\n  this.bases[0].setY(this.ANUM);\n\n  for (npairs = 0, i = 1; i <= this.nbase; i++) {\n    this.bases.push(new _base_js__WEBPACK_IMPORTED_MODULE_3__[\"Base\"]());\n    this.bases[i].setExtracted(false);\n    this.bases[i].setX(this.ANUM);\n    this.bases[i].setY(this.ANUM);\n    this.bases[i].setMate(pair_table[i]);\n    if (pair_table[i] > i) npairs++;\n  } // must have at least 1 pair to avoid segfault\n\n\n  if (npairs == 0) {\n    this.bases[1].setMate(this.nbase);\n    this.bases[this.nbase].setMate(1);\n  }\n};\n\nNAView.prototype.find_regions = function find_regions() {\n  var i = null;\n  var mate = null;\n  var nb1 = null;\n  nb1 = this.nbase + 1;\n  var mark = [];\n\n  for (i = 0; i < nb1; i++) {\n    mark.push(false);\n  }\n\n  this.nregion = 0;\n\n  for (i = 0; i <= this.nbase; i++) {\n    if ((mate = this.bases[i].getMate()) != 0 && !mark[i]) {\n      this.regions[this.nregion].setStart1(i);\n      this.regions[this.nregion].setEnd2(mate);\n      mark[i] = true;\n      mark[mate] = true;\n      this.bases[i].setRegion(this.regions[this.nregion]);\n      this.bases[mate].setRegion(this.regions[this.nregion]);\n\n      for (i++, mate--; i < mate && this.bases[i].getMate() == mate; i++, mate--) {\n        mark[mate] = true;\n        mark[i] = true;\n        this.bases[i].setRegion(this.regions[this.nregion]);\n        this.bases[mate].setRegion(this.regions[this.nregion]);\n      }\n\n      this.regions[this.nregion].setEnd1(--i);\n      this.regions[this.nregion].setStart2(mate + 1);\n      this.nregion++;\n    }\n  }\n};\n\nNAView.prototype.construct_loop = function construct_loop(ibase) {\n  var i = null;\n  var mate = null;\n  var retloop = new _loop_js__WEBPACK_IMPORTED_MODULE_4__[\"Loop\"]();\n  var lp = new _loop_js__WEBPACK_IMPORTED_MODULE_4__[\"Loop\"]();\n  var cp = new _connection_js__WEBPACK_IMPORTED_MODULE_1__[\"Connection\"]();\n  var rp = new _region_js__WEBPACK_IMPORTED_MODULE_2__[\"Region\"]();\n  var rlp = new _radloop_js__WEBPACK_IMPORTED_MODULE_0__[\"Radloop\"]();\n  retloop = this.loops[this.loop_count++];\n  retloop.setNconnection(0);\n  retloop.setDepth(0);\n  retloop.setNumber(this.loop_count);\n  retloop.setRadius(0.0);\n\n  for (rlp = this.rlphead; rlp != null; rlp = rlp.getNext()) {\n    if (rlp.getLoopnumber() == this.loop_count) retloop.setRadius(rlp.getRadius());\n  }\n\n  i = ibase;\n\n  do {\n    if ((mate = this.bases[i].getMate()) != 0) {\n      rp = this.bases[i].getRegion();\n\n      if (!this.bases[rp.getStart1()].isExtracted()) {\n        if (i == rp.getStart1()) {\n          this.bases[rp.getStart1()].setExtracted(true);\n          this.bases[rp.getEnd1()].setExtracted(true);\n          this.bases[rp.getStart2()].setExtracted(true);\n          this.bases[rp.getEnd2()].setExtracted(true);\n          lp = this.construct_loop(rp.getEnd1() < this.nbase ? rp.getEnd1() + 1 : 0);\n        } else if (i == rp.getStart2()) {\n          this.bases[rp.getStart2()].setExtracted(true);\n          this.bases[rp.getEnd2()].setExtracted(true);\n          this.bases[rp.getStart1()].setExtracted(true);\n          this.bases[rp.getEnd1()].setExtracted(true);\n          lp = this.construct_loop(rp.getEnd2() < this.nbase ? rp.getEnd2() + 1 : 0);\n        } else {\n          console.log(\"Something went terribly wrong ....\");\n        }\n\n        retloop.setNconnection(retloop.getNconnection() + 1);\n        cp = new _connection_js__WEBPACK_IMPORTED_MODULE_1__[\"Connection\"]();\n        retloop.setConnection(retloop.getNconnection() - 1, cp);\n        retloop.setConnection(retloop.getNconnection(), null);\n        cp.setLoop(lp);\n        cp.setRegion(rp);\n\n        if (i == rp.getStart1()) {\n          cp.setStart(rp.getStart1());\n          cp.setEnd(rp.getEnd2());\n        } else {\n          cp.setStart(rp.getStart2());\n          cp.setEnd(rp.getEnd1());\n        }\n\n        cp.setExtruded(false);\n        cp.setBroken(false);\n        lp.setNconnection(lp.getNconnection() + 1);\n        cp = new _connection_js__WEBPACK_IMPORTED_MODULE_1__[\"Connection\"]();\n        lp.setConnection(lp.getNconnection() - 1, cp);\n        lp.setConnection(lp.getNconnection(), null);\n        cp.setLoop(retloop);\n        cp.setRegion(rp);\n\n        if (i == rp.getStart1()) {\n          cp.setStart(rp.getStart2());\n          cp.setEnd(rp.getEnd1());\n        } else {\n          cp.setStart(rp.getStart1());\n          cp.setEnd(rp.getEnd2());\n        }\n\n        cp.setExtruded(false);\n        cp.setBroken(false);\n      }\n\n      i = mate;\n    }\n\n    if (++i > this.nbase) i = 0;\n  } while (i != ibase);\n\n  return retloop;\n};\n\nNAView.prototype.find_central_loop = function find_central_loop() {\n  var lp = new _loop_js__WEBPACK_IMPORTED_MODULE_4__[\"Loop\"]();\n  var maxconn = null;\n  var maxdepth = null;\n  var i = null;\n  determine_depths.bind(this)();\n  maxconn = 0;\n  maxdepth = -1;\n\n  for (i = 0; i < this.loop_count; i++) {\n    lp = this.loops[i];\n\n    if (lp.getNconnection() > maxconn) {\n      maxdepth = lp.getDepth();\n      maxconn = lp.getNconnection();\n      this.root = lp;\n    } else if (lp.getDepth() > maxdepth && lp.getNconnection() == maxconn) {\n      maxdepth = lp.getDepth();\n      this.root = lp;\n    }\n  }\n};\n\nfunction determine_depths() {\n  var lp = new _loop_js__WEBPACK_IMPORTED_MODULE_4__[\"Loop\"]();\n  var i = null;\n  var j = null;\n\n  for (i = 0; i < this.loop_count; i++) {\n    lp = this.loops[i];\n\n    for (j = 0; j < this.loop_count; j++) {\n      this.loops[j].setMark(false);\n    }\n\n    lp.setDepth(depth(lp));\n  }\n}\n\nfunction depth(lp) {\n  var count = null;\n  var ret = null;\n  var d = null;\n\n  if (lp.getNconnection() <= 1) {\n    return 0;\n  }\n\n  if (lp.isMark()) {\n    return -1;\n  }\n\n  lp.setMark(true);\n  count = 0;\n  ret = 0;\n\n  for (var i = 0; lp.getConnection(i) != null; i++) {\n    d = depth(lp.getConnection(i).getLoop());\n\n    if (d >= 0) {\n      if (++count == 1) {\n        ret = d;\n      } else if (ret > d) {\n        ret = d;\n      }\n    }\n  }\n\n  lp.setMark(false);\n  return ret + 1;\n}\n\nNAView.prototype.traverse_loop = function traverse_loop(lp, anchor_connection) {\n  var xs, ys, xe, ye, xn, yn, angleinc, r;\n  var radius, xc, yc, xo, yo, astart, aend, a;\n  var cp, cpnext, acp, cpprev;\n  var i, j, n, ic;\n  var da, maxang;\n  var count, icstart, icend, icmiddle, icroot;\n  var done, done_all_connections, rooted;\n  var sign;\n  var midx, midy, nrx, nry, mx, my, vx, vy, dotmv, nmidx, nmidy;\n  var icstart1, icup, icdown, icnext, direction;\n  var dan, dx, dy, rr;\n  var cpx, cpy, cpnextx, cpnexty, cnx, cny, rcn, rc, lnx, lny, rl, ac, acn, sx, sy, dcp;\n  var imaxloop = 0;\n  angleinc = 2 * Math.PI / (this.nbase + 1);\n  acp = null;\n  icroot = -1;\n  var indice = 0;\n\n  for (ic = 0; (cp = lp.getConnection(indice)) != null; indice++, ic++) {\n    xs = -Math.sin(angleinc * cp.getStart());\n    ys = Math.cos(angleinc * cp.getStart());\n    xe = -Math.sin(angleinc * cp.getEnd());\n    ye = Math.cos(angleinc * cp.getEnd());\n    xn = ye - ys;\n    yn = xs - xe;\n    r = Math.sqrt(xn * xn + yn * yn);\n    cp.setXrad(xn / r);\n    cp.setYrad(yn / r);\n    cp.setAngle(Math.atan2(yn, xn));\n\n    if (cp.getAngle() < 0.0) {\n      cp.setAngle(cp.getAngle() + 2 * Math.PI);\n    }\n\n    if (anchor_connection != null && anchor_connection.getRegion() == cp.getRegion()) {\n      acp = cp;\n      icroot = ic;\n    }\n  }\n\n  set_radius: while (true) {\n    this.determine_radius(lp, this.lencut);\n    radius = lp.getRadius() / this.RADIUS_REDUCTION_FACTOR;\n\n    if (anchor_connection == null) {\n      xc = yc = 0.0;\n    } else {\n      xo = (this.bases[acp.getStart()].getX() + this.bases[acp.getEnd()].getX()) / 2.0;\n      yo = (this.bases[acp.getStart()].getY() + this.bases[acp.getEnd()].getY()) / 2.0;\n      xc = xo - radius * acp.getXrad();\n      yc = yo - radius * acp.getYrad();\n    } // The construction of the connectors will proceed in blocks of\n    // connected connectors, where a connected connector pairs means two\n    // connectors that are forced out of the drawn circle because they\n    // are too close together in angle.\n    // First, find the start of a block of connected connectors\n\n\n    if (icroot == -1) {\n      icstart = 0;\n    } else {\n      icstart = icroot;\n    }\n\n    cp = lp.getConnection(icstart);\n    count = 0;\n    done = false;\n\n    do {\n      j = icstart - 1;\n\n      if (j < 0) {\n        j = lp.getNconnection() - 1;\n      }\n\n      cpprev = lp.getConnection(j);\n\n      if (!this.connected_connection(cpprev, cp)) {\n        done = true;\n      } else {\n        icstart = j;\n        cp = cpprev;\n      }\n\n      if (++count > lp.getNconnection()) {\n        // Here everything is connected. Break on maximum angular\n        // separation between connections.\n        maxang = -1.0;\n\n        for (ic = 0; ic < lp.getNconnection(); ic++) {\n          j = ic + 1;\n\n          if (j >= lp.getNconnection()) {\n            j = 0;\n          }\n\n          cp = lp.getConnection(ic);\n          cpnext = lp.getConnection(j);\n          ac = cpnext.getAngle() - cp.getAngle();\n\n          if (ac < 0.0) {\n            ac += 2 * Math.PI;\n          }\n\n          if (ac > maxang) {\n            maxang = ac;\n            imaxloop = ic;\n          }\n        }\n\n        icend = imaxloop;\n        icstart = imaxloop + 1;\n\n        if (icstart >= lp.getNconnection()) {\n          icstart = 0;\n        }\n\n        cp = lp.getConnection(icend);\n        cp.setBroken(true);\n        done = true;\n      }\n    } while (!done);\n\n    done_all_connections = false;\n    icstart1 = icstart;\n\n    while (!done_all_connections) {\n      count = 0;\n      done = false;\n      icend = icstart;\n      rooted = false;\n\n      while (!done) {\n        cp = lp.getConnection(icend);\n\n        if (icend == icroot) {\n          rooted = true;\n        }\n\n        j = icend + 1;\n\n        if (j >= lp.getNconnection()) {\n          j = 0;\n        }\n\n        cpnext = lp.getConnection(j);\n\n        if (this.connected_connection(cp, cpnext)) {\n          if (++count >= lp.getNconnection()) {\n            break;\n          }\n\n          icend = j;\n        } else {\n          done = true;\n        }\n      }\n\n      icmiddle = this.find_ic_middle(icstart, icend, anchor_connection, acp, lp);\n      ic = icup = icdown = icmiddle;\n      done = false;\n      direction = 0;\n\n      while (!done) {\n        if (direction < 0) {\n          ic = icup;\n        } else if (direction == 0) {\n          ic = icmiddle;\n        } else {\n          ic = icdown;\n        }\n\n        if (ic >= 0) {\n          cp = lp.getConnection(ic);\n\n          if (anchor_connection == null || acp != cp) {\n            if (direction == 0) {\n              astart = cp.getAngle() - Math.asin(1.0 / 2.0 / radius);\n              aend = cp.getAngle() + Math.asin(1.0 / 2.0 / radius);\n              this.bases[cp.getStart()].setX(xc + radius * Math.cos(astart));\n              this.bases[cp.getStart()].setY(yc + radius * Math.sin(astart));\n              this.bases[cp.getEnd()].setX(xc + radius * Math.cos(aend));\n              this.bases[cp.getEnd()].setY(yc + radius * Math.sin(aend));\n            } else if (direction < 0) {\n              j = ic + 1;\n\n              if (j >= lp.getNconnection()) {\n                j = 0;\n              }\n\n              cp = lp.getConnection(ic);\n              cpnext = lp.getConnection(j);\n              cpx = cp.getXrad();\n              cpy = cp.getYrad();\n              ac = (cp.getAngle() + cpnext.getAngle()) / 2.0;\n\n              if (cp.getAngle() > cpnext.getAngle()) {\n                ac -= Math.PI;\n              }\n\n              cnx = Math.cos(ac);\n              cny = Math.sin(ac);\n              lnx = cny;\n              lny = -cnx;\n              da = cpnext.getAngle() - cp.getAngle();\n\n              if (da < 0.0) {\n                da += 2 * Math.PI;\n              }\n\n              if (cp.isExtruded()) {\n                if (da <= Math.PI / 2) {\n                  rl = 2.0;\n                } else {\n                  rl = 1.5;\n                }\n              } else {\n                rl = 1.0;\n              }\n\n              this.bases[cp.getEnd()].setX(this.bases[cpnext.getStart()].getX() + rl * lnx);\n              this.bases[cp.getEnd()].setY(this.bases[cpnext.getStart()].getY() + rl * lny);\n              this.bases[cp.getStart()].setX(this.bases[cp.getEnd()].getX() + cpy);\n              this.bases[cp.getStart()].setY(this.bases[cp.getEnd()].getY() - cpx);\n            } else {\n              j = ic - 1;\n\n              if (j < 0) {\n                j = lp.getNconnection() - 1;\n              }\n\n              cp = lp.getConnection(j);\n              cpnext = lp.getConnection(ic);\n              cpnextx = cpnext.getXrad();\n              cpnexty = cpnext.getYrad();\n              ac = (cp.getAngle() + cpnext.getAngle()) / 2.0;\n\n              if (cp.getAngle() > cpnext.getAngle()) {\n                ac -= Math.PI;\n              }\n\n              cnx = Math.cos(ac);\n              cny = Math.sin(ac);\n              lnx = -cny;\n              lny = cnx;\n              da = cpnext.getAngle() - cp.getAngle();\n\n              if (da < 0.0) {\n                da += 2 * Math.PI;\n              }\n\n              if (cp.isExtruded()) {\n                if (da <= Math.PI / 2) {\n                  rl = 2.0;\n                } else {\n                  rl = 1.5;\n                }\n              } else {\n                rl = 1.0;\n              }\n\n              this.bases[cpnext.getStart()].setX(this.bases[cp.getEnd()].getX() + rl * lnx);\n              this.bases[cpnext.getStart()].setY(this.bases[cp.getEnd()].getY() + rl * lny);\n              this.bases[cpnext.getEnd()].setX(this.bases[cpnext.getStart()].getX() - cpnexty);\n              this.bases[cpnext.getEnd()].setY(this.bases[cpnext.getStart()].getY() + cpnextx);\n            }\n          }\n        }\n\n        if (direction < 0) {\n          if (icdown == icend) {\n            icdown = -1;\n          } else if (icdown >= 0) {\n            if (++icdown >= lp.getNconnection()) {\n              icdown = 0;\n            }\n          }\n\n          direction = 1;\n        } else {\n          if (icup == icstart) {\n            icup = -1;\n          } else if (icup >= 0) {\n            if (--icup < 0) {\n              icup = lp.getNconnection() - 1;\n            }\n          }\n\n          direction = -1;\n        }\n\n        done = icup == -1 && icdown == -1;\n      }\n\n      icnext = icend + 1;\n\n      if (icnext >= lp.getNconnection()) {\n        icnext = 0;\n      }\n\n      if (icend != icstart && !(icstart == icstart1 && icnext == icstart1)) {\n        // Move the bases just constructed (or the radius) so that\n        // the bisector of the end points is radius distance away\n        // from the loop center.\n        cp = lp.getConnection(icstart);\n        cpnext = lp.getConnection(icend);\n        dx = this.bases[cpnext.getEnd()].getX() - this.bases[cp.getStart()].getX();\n        dy = this.bases[cpnext.getEnd()].getY() - this.bases[cp.getStart()].getY();\n        midx = this.bases[cp.getStart()].getX() + dx / 2.0;\n        midy = this.bases[cp.getStart()].getY() + dy / 2.0;\n        rr = Math.sqrt(dx * dx + dy * dy);\n        mx = dx / rr;\n        my = dy / rr;\n        vx = xc - midx;\n        vy = yc - midy;\n        rr = Math.sqrt(dx * dx + dy * dy);\n        vx /= rr;\n        vy /= rr;\n        dotmv = vx * mx + vy * my;\n        nrx = dotmv * mx - vx;\n        nry = dotmv * my - vy;\n        rr = Math.sqrt(nrx * nrx + nry * nry);\n        nrx /= rr;\n        nry /= rr; // Determine which side of the bisector the center should\n        // be.\n\n        dx = this.bases[cp.getStart()].getX() - xc;\n        dy = this.bases[cp.getStart()].getY() - yc;\n        ac = Math.atan2(dy, dx);\n\n        if (ac < 0.0) {\n          ac += 2 * Math.PI;\n        }\n\n        dx = this.bases[cpnext.getEnd()].getX() - xc;\n        dy = this.bases[cpnext.getEnd()].getY() - yc;\n        acn = Math.atan2(dy, dx);\n\n        if (acn < 0.0) {\n          acn += 2 * Math.PI;\n        }\n\n        if (acn < ac) {\n          acn += 2 * Math.PI;\n        }\n\n        if (acn - ac > Math.PI) {\n          sign = -1;\n        } else {\n          sign = 1;\n        }\n\n        nmidx = xc + sign * radius * nrx;\n        nmidy = yc + sign * radius * nry;\n\n        if (rooted) {\n          xc -= nmidx - midx;\n          yc -= nmidy - midy;\n        } else {\n          for (ic = icstart;;) {\n            cp = lp.getConnection(ic);\n            i = cp.getStart();\n            this.bases[i].setX(this.bases[i].getX() + nmidx - midx);\n            this.bases[i].setY(this.bases[i].getY() + nmidy - midy);\n            i = cp.getEnd();\n            this.bases[i].setX(this.bases[i].getX() + nmidx - midx);\n            this.bases[i].setY(this.bases[i].getY() + nmidy - midy);\n\n            if (ic == icend) {\n              break;\n            }\n\n            if (++ic >= lp.getNconnection()) {\n              ic = 0;\n            }\n          }\n        }\n      }\n\n      icstart = icnext;\n      done_all_connections = icstart == icstart1;\n    }\n\n    for (ic = 0; ic < lp.getNconnection(); ic++) {\n      cp = lp.getConnection(ic);\n      j = ic + 1;\n\n      if (j >= lp.getNconnection()) {\n        j = 0;\n      }\n\n      cpnext = lp.getConnection(j);\n      dx = this.bases[cp.getEnd()].getX() - xc;\n      dy = this.bases[cp.getEnd()].getY() - yc;\n      rc = Math.sqrt(dx * dx + dy * dy);\n      ac = Math.atan2(dy, dx);\n\n      if (ac < 0.0) {\n        ac += 2 * Math.PI;\n      }\n\n      dx = this.bases[cpnext.getStart()].getX() - xc;\n      dy = this.bases[cpnext.getStart()].getY() - yc;\n      rcn = Math.sqrt(dx * dx + dy * dy);\n      acn = Math.atan2(dy, dx);\n\n      if (acn < 0.0) {\n        acn += 2 * Math.PI;\n      }\n\n      if (acn < ac) {\n        acn += 2 * Math.PI;\n      }\n\n      dan = acn - ac;\n      dcp = cpnext.getAngle() - cp.getAngle();\n\n      if (dcp <= 0.0) {\n        dcp += 2 * Math.PI;\n      }\n\n      if (Math.abs(dan - dcp) > Math.PI) {\n        if (cp.isExtruded()) {\n          console.log(\"Warning from traverse_loop. Loop \" + lp.getNumber() + \" has crossed regions\\n\");\n        } else if (cpnext.getStart() - cp.getEnd() != 1) {\n          cp.setExtruded(true);\n          continue set_radius; // remplacement du goto\n        }\n      }\n\n      if (cp.isExtruded()) {\n        this.construct_extruded_segment(cp, cpnext);\n      } else {\n        n = cpnext.getStart() - cp.getEnd();\n\n        if (n < 0) {\n          n += this.nbase + 1;\n        }\n\n        angleinc = dan / n;\n\n        for (j = 1; j < n; j++) {\n          i = cp.getEnd() + j;\n\n          if (i > this.nbase) {\n            i -= this.nbase + 1;\n          }\n\n          a = ac + j * angleinc;\n          rr = rc + (rcn - rc) * (a - ac) / dan;\n          this.bases[i].setX(xc + rr * Math.cos(a));\n          this.bases[i].setY(yc + rr * Math.sin(a));\n        }\n      }\n    }\n\n    break;\n  }\n\n  for (ic = 0; ic < lp.getNconnection(); ic++) {\n    if (icroot != ic) {\n      cp = lp.getConnection(ic); //IM HERE\n\n      this.generate_region(cp);\n      this.traverse_loop(cp.getLoop(), cp);\n    }\n  }\n\n  n = 0;\n  sx = 0.0;\n  sy = 0.0;\n\n  for (ic = 0; ic < lp.getNconnection(); ic++) {\n    j = ic + 1;\n\n    if (j >= lp.getNconnection()) {\n      j = 0;\n    }\n\n    cp = lp.getConnection(ic);\n    cpnext = lp.getConnection(j);\n    n += 2;\n    sx += this.bases[cp.getStart()].getX() + this.bases[cp.getEnd()].getX();\n    sy += this.bases[cp.getStart()].getY() + this.bases[cp.getEnd()].getY();\n\n    if (!cp.isExtruded()) {\n      for (j = cp.getEnd() + 1; j != cpnext.getStart(); j++) {\n        if (j > this.nbase) {\n          j -= this.nbase + 1;\n        }\n\n        n++;\n        sx += this.bases[j].getX();\n        sy += this.bases[j].getY();\n      }\n    }\n  }\n\n  lp.setX(sx / n);\n  lp.setY(sy / n);\n};\n\nNAView.prototype.determine_radius = function determine_radius(lp, lencut) {\n  var mindit, ci, dt, sumn, sumd, radius, dit;\n  var i,\n      j,\n      end,\n      start,\n      imindit = 0;\n  var cp = new _connection_js__WEBPACK_IMPORTED_MODULE_1__[\"Connection\"](),\n      cpnext = new _connection_js__WEBPACK_IMPORTED_MODULE_1__[\"Connection\"]();\n  var rt2_2 = 0.7071068;\n\n  do {\n    mindit = 1.0e10;\n\n    for (sumd = 0.0, sumn = 0.0, i = 0; i < lp.getNconnection(); i++) {\n      cp = lp.getConnection(i);\n      j = i + 1;\n\n      if (j >= lp.getNconnection()) {\n        j = 0;\n      }\n\n      cpnext = lp.getConnection(j);\n      end = cp.getEnd();\n      start = cpnext.getStart();\n\n      if (start < end) {\n        start += this.nbase + 1;\n      }\n\n      dt = cpnext.getAngle() - cp.getAngle();\n\n      if (dt <= 0.0) {\n        dt += 2 * Math.PI;\n      }\n\n      if (!cp.isExtruded()) {\n        ci = start - end;\n      } else {\n        if (dt <= Math.PI / 2) {\n          ci = 2.0;\n        } else {\n          ci = 1.5;\n        }\n      }\n\n      sumn += dt * (1.0 / ci + 1.0);\n      sumd += dt * dt / ci;\n      dit = dt / ci;\n\n      if (dit < mindit && !cp.isExtruded() && ci > 1.0) {\n        mindit = dit;\n        imindit = i;\n      }\n    }\n\n    radius = sumn / sumd;\n\n    if (radius < rt2_2) {\n      radius = rt2_2;\n    }\n\n    if (mindit * radius < lencut) {\n      lp.getConnection(imindit).setExtruded(true);\n    }\n  } while (mindit * radius < lencut);\n\n  if (lp.getRadius() > 0.0) {\n    radius = lp.getRadius();\n  } else {\n    lp.setRadius(radius);\n  }\n};\n\nNAView.prototype.find_ic_middle = function find_ic_middle(icstart, icend, anchor_connection, acp, lp) {\n  var count, ret, ic, i;\n  var done;\n  count = 0;\n  ret = -1;\n  ic = icstart;\n  done = false;\n\n  while (!done) {\n    if (count++ > lp.getNconnection() * 2) {\n      console.log(\"Infinite loop in 'find_ic_middle'\");\n    }\n\n    if (anchor_connection != null && lp.getConnection(ic) == acp) {\n      ret = ic;\n    }\n\n    done = ic == icend;\n\n    if (++ic >= lp.getNconnection()) {\n      ic = 0;\n    }\n  }\n\n  if (ret == -1) {\n    for (i = 1, ic = icstart; i < (count + 1) / 2; i++) {\n      if (++ic >= lp.getNconnection()) ic = 0;\n    }\n\n    ret = ic;\n  }\n\n  return ret;\n};\n\nNAView.prototype.construct_extruded_segment = function construct_extruded_segment(cp, cpnext) {\n  var astart, aend1, aend2, aave, dx, dy, a1, a2, ac, rr, da, dac;\n  var start, end, n, nstart, nend;\n  var collision;\n  astart = cp.getAngle();\n  aend2 = aend1 = cpnext.getAngle();\n\n  if (aend2 < astart) {\n    aend2 += 2 * Math.PI;\n  }\n\n  aave = (astart + aend2) / 2.0;\n  start = cp.getEnd();\n  end = cpnext.getStart();\n  n = end - start;\n\n  if (n < 0) {\n    n += this.nbase + 1;\n  }\n\n  da = cpnext.getAngle() - cp.getAngle();\n\n  if (da < 0.0) {\n    da += 2 * Math.PI;\n  }\n\n  if (n == 2) {\n    this.construct_circle_segment(start, end);\n  } else {\n    dx = this.bases[end].getX() - this.bases[start].getX();\n    dy = this.bases[end].getY() - this.bases[start].getY();\n    rr = Math.sqrt(dx * dx + dy * dy);\n    dx /= rr;\n    dy /= rr;\n\n    if (rr >= 1.5 && da <= Math.PI / 2) {\n      nstart = start + 1;\n\n      if (nstart > this.nbase) {\n        nstart -= this.nbase + 1;\n      }\n\n      nend = end - 1;\n\n      if (nend < 0) {\n        nend += this.nbase + 1;\n      }\n\n      this.bases[nstart].setX(this.bases[start].getX() + 0.5 * dx);\n      this.bases[nstart].setY(this.bases[start].getY() + 0.5 * dy);\n      this.bases[nend].setX(this.bases[end].getX() - 0.5 * dx);\n      this.bases[nend].setY(this.bases[end].getY() - 0.5 * dy);\n      start = nstart;\n      end = nend;\n    }\n\n    do {\n      collision = false;\n      this.construct_circle_segment(start, end);\n      nstart = start + 1;\n\n      if (nstart > this.nbase) {\n        nstart -= this.nbase + 1;\n      }\n\n      dx = this.bases[nstart].getX() - this.bases[start].getX();\n      dy = this.bases[nstart].getY() - this.bases[start].getY();\n      a1 = Math.atan2(dy, dx);\n\n      if (a1 < 0.0) {\n        a1 += 2 * Math.PI;\n      }\n\n      dac = a1 - astart;\n\n      if (dac < 0.0) {\n        dac += 2 * Math.PI;\n      }\n\n      if (dac > Math.PI) {\n        collision = true;\n      }\n\n      nend = end - 1;\n\n      if (nend < 0) {\n        nend += this.nbase + 1;\n      }\n\n      dx = this.bases[nend].getX() - this.bases[end].getX();\n      dy = this.bases[nend].getY() - this.bases[end].getY();\n      a2 = Math.atan2(dy, dx);\n\n      if (a2 < 0.0) {\n        a2 += 2 * Math.PI;\n      }\n\n      dac = aend1 - a2;\n\n      if (dac < 0.0) {\n        dac += 2 * Math.PI;\n      }\n\n      if (dac > Math.PI) {\n        collision = true;\n      }\n\n      if (collision) {\n        ac = this.minf2(aave, astart + 0.5);\n        this.bases[nstart].setX(this.bases[start].getX() + Math.cos(ac));\n        this.bases[nstart].setY(this.bases[start].getY() + Math.sin(ac));\n        start = nstart;\n        ac = this.maxf2(aave, aend2 - 0.5);\n        this.bases[nend].setX(this.bases[end].getX() + Math.cos(ac));\n        this.bases[nend].setY(this.bases[end].getY() + Math.sin(ac));\n        end = nend;\n        n -= 2;\n      }\n    } while (collision && n > 1);\n  }\n};\n\nNAView.prototype.construct_circle_segment = function construct_circle_segment(start, end) {\n  var dx, dy, rr, midx, midy, xn, yn, nrx, nry, mx, my, a;\n  var l, j, i;\n  dx = this.bases[end].getX() - this.bases[start].getX();\n  dy = this.bases[end].getY() - this.bases[start].getY();\n  rr = Math.sqrt(dx * dx + dy * dy);\n  l = end - start;\n\n  if (l < 0) {\n    l += this.nbase + 1;\n  }\n\n  if (rr >= l) {\n    dx /= rr;\n    dy /= rr;\n\n    for (j = 1; j < l; j++) {\n      i = start + j;\n\n      if (i > this.nbase) {\n        i -= this.nbase + 1;\n      }\n\n      this.bases[i].setX(this.bases[start].getX() + dx * j / l);\n      this.bases[i].setY(this.bases[start].getY() + dy * j / l);\n    }\n  } else {\n    this.find_center_for_arc(l - 1, rr);\n    dx /= rr;\n    dy /= rr;\n    midx = this.bases[start].getX() + dx * rr / 2.0;\n    midy = this.bases[start].getY() + dy * rr / 2.0;\n    xn = dy;\n    yn = -dx;\n    nrx = midx + this._h * xn;\n    nry = midy + this._h * yn;\n    mx = this.bases[start].getX() - nrx;\n    my = this.bases[start].getY() - nry;\n    rr = Math.sqrt(mx * mx + my * my);\n    a = Math.atan2(my, mx);\n\n    for (j = 1; j < l; j++) {\n      i = start + j;\n\n      if (i > this.nbase) {\n        i -= this.nbase + 1;\n      }\n\n      this.bases[i].setX(nrx + rr * Math.cos(a + j * this.angleinc));\n      this.bases[i].setY(nry + rr * Math.sin(a + j * this.angleinc));\n    }\n  }\n};\n\nNAView.prototype.find_center_for_arc = function find_center_for_arc(n, b) {\n  var h, hhi, hlow, r, disc, theta, e, phi;\n  var iter;\n  hhi = (n + 1.0) / Math.PI; // changed to prevent div by zero if (ih)\n\n  hlow = -hhi - b / (n + 1.000001 - b);\n\n  if (b < 1) {\n    // otherwise we might fail below (ih)\n    hlow = 0;\n  }\n\n  iter = 0;\n\n  do {\n    h = (hhi + hlow) / 2.0;\n    r = Math.sqrt(h * h + b * b / 4.0);\n    disc = 1.0 - 0.5 / (r * r);\n\n    if (Math.abs(disc) > 1.0) {\n      console.log(\"Unexpected large magnitude discriminant = \" + disc + \" \" + r);\n    }\n\n    theta = Math.acos(disc);\n    phi = Math.acos(h / r);\n    e = theta * (n + 1) + 2 * phi - 2 * Math.PI;\n\n    if (e > 0.0) {\n      hlow = h;\n    } else {\n      hhi = h;\n    }\n  } while (Math.abs(e) > 0.0001 && ++iter < this.MAXITER);\n\n  if (iter >= this.MAXITER) {\n    if (noIterationFailureYet) {\n      console.log(\"Iteration failed in find_center_for_arc\");\n      noIterationFailureYet = false;\n    }\n\n    h = 0.0;\n    theta = 0.0;\n  }\n\n  this._h = h;\n  this.angleinc = theta;\n};\n\nNAView.prototype.generate_region = function generate_region(cp) {\n  var l, start, end, i, mate;\n  var rp;\n  rp = cp.getRegion();\n  l = 0;\n\n  if (cp.getStart() == rp.getStart1()) {\n    start = rp.getStart1();\n    end = rp.getEnd1();\n  } else {\n    start = rp.getStart2();\n    end = rp.getEnd2();\n  }\n\n  if (this.bases[cp.getStart()].getX() > this.ANUM - 100.0 || this.bases[cp.getEnd()].getX() > this.ANUM - 100.0) {\n    console.log(\"Bad region passed to generate_region. Coordinates not defined.\");\n  }\n\n  for (i = start + 1; i <= end; i++) {\n    l++;\n    this.bases[i].setX(this.bases[cp.getStart()].getX() + this.HELIX_FACTOR * l * cp.getXrad());\n    this.bases[i].setY(this.bases[cp.getStart()].getY() + this.HELIX_FACTOR * l * cp.getYrad());\n    mate = this.bases[i].getMate();\n    this.bases[mate].setX(this.bases[cp.getEnd()].getX() + this.HELIX_FACTOR * l * cp.getXrad());\n    this.bases[mate].setY(this.bases[cp.getEnd()].getY() + this.HELIX_FACTOR * l * cp.getYrad());\n  }\n};\n\nNAView.prototype.minf2 = function minf2(x1, x2) {\n  return x1 < x2 ? x1 : x2;\n};\n\nNAView.prototype.maxf2 = function maxf2(x1, x2) {\n  return x1 > x2 ? x1 : x2;\n};\n\nNAView.prototype.connected_connection = function connected_connection(cp, cpnext) {\n  if (cp.isExtruded()) {\n    return true;\n  } else if (cp.getEnd() + 1 == cpnext.getStart()) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n//# sourceURL=webpack://%5Bname%5D/./scripts/naview/naview.js?");

/***/ }),

/***/ "./scripts/naview/radloop.js":
/*!***********************************!*\
  !*** ./scripts/naview/radloop.js ***!
  \***********************************/
/*! exports provided: Radloop */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Radloop\", function() { return Radloop; });\nfunction Radloop() {\n  this.radius = null;\n  this.loopnumber = null;\n  this.next = null;\n  this.prev = null;\n}\n\nRadloop.prototype.getRadius = function () {\n  return this.radius;\n};\n\nRadloop.prototype.setRadius = function (radius) {\n  this.radius = radius;\n};\n\nRadloop.prototype.getLoopnumber = function () {\n  return this.loopnumber;\n};\n\nRadloop.prototype.setLoopnumber = function (loopnumber) {\n  this.loopnumber = loopnumber;\n};\n\nRadloop.prototype.getNext = function () {\n  return this.next;\n};\n\nRadloop.prototype.setNext = function (next) {\n  this.next = next;\n};\n\nRadloop.prototype.getPrev = function () {\n  return this.prev;\n};\n\nRadloop.prototype.setPrev = function (prev) {\n  this.prev = prev;\n};\n\n//# sourceURL=webpack://%5Bname%5D/./scripts/naview/radloop.js?");

/***/ }),

/***/ "./scripts/naview/region.js":
/*!**********************************!*\
  !*** ./scripts/naview/region.js ***!
  \**********************************/
/*! exports provided: Region */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Region\", function() { return Region; });\nfunction Region() {\n  this._start1 = null;\n  this._end1 = null;\n  this._start2 = null;\n  this._end2 = null;\n}\n\nRegion.prototype.getStart1 = function () {\n  return this._start1;\n};\n\nRegion.prototype.setStart1 = function (start1) {\n  this._start1 = start1;\n};\n\nRegion.prototype.getEnd1 = function () {\n  return this._end1;\n};\n\nRegion.prototype.setEnd1 = function (end1) {\n  this._end1 = end1;\n};\n\nRegion.prototype.getStart2 = function () {\n  return this._start2;\n};\n\nRegion.prototype.setStart2 = function (start2) {\n  this._start2 = start2;\n};\n\nRegion.prototype.getEnd2 = function () {\n  return this._end2;\n};\n\nRegion.prototype.setEnd2 = function (end2) {\n  this._end2 = end2;\n};\n\n//# sourceURL=webpack://%5Bname%5D/./scripts/naview/region.js?");

/***/ }),

/***/ "./scripts/rnagraph.js":
/*!*****************************!*\
  !*** ./scripts/rnagraph.js ***!
  \*****************************/
/*! exports provided: ProteinGraph, RNAGraph, moleculesToJson */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ProteinGraph\", function() { return ProteinGraph; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RNAGraph\", function() { return RNAGraph; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"moleculesToJson\", function() { return moleculesToJson; });\n/* harmony import */ var _rnautils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rnautils.js */ \"./scripts/rnautils.js\");\n/* harmony import */ var slugid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! slugid */ \"../node_modules/slugid/index.js\");\n/* harmony import */ var slugid__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(slugid__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\nvar numberSort = function numberSort(a, b) {\n  return a - b;\n};\n\nif (typeof String.prototype.trim === 'undefined') {\n  String.prototype.trim = function () {\n    return String(this).replace(/^\\s+|\\s+$/g, '');\n  };\n}\n\nfunction ProteinGraph(structName, size, uid) {\n  var self = this;\n  self.type = 'protein';\n  self.size = size;\n  self.nodes = [{\n    'name': 'P',\n    'num': 1,\n    'radius': 3 * Math.sqrt(size),\n    'rna': self,\n    'nodeType': 'protein',\n    'structName': structName,\n    'elemType': 'p',\n    'size': size,\n    'uid': slugid__WEBPACK_IMPORTED_MODULE_1___default.a.nice()\n  }];\n  self.links = [];\n  self.uid = slugid__WEBPACK_IMPORTED_MODULE_1___default.a.nice();\n\n  self.addUids = function (uids) {\n    for (var i = 0; i < uids.length; i++) {\n      self.nodes[i].uid = uids[i];\n    }\n\n    return self;\n  };\n\n  self.getUids = function () {\n    /* Get the positions of each node so that they\n     * can be passed to elementsToJson later\n     */\n    uids = [];\n\n    for (var i = 0; i < self.dotbracket.length; i++) {\n      uids.push(self.nodes[i].uid);\n    }\n\n    return uids;\n  };\n}\nfunction RNAGraph() {\n  var seq = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var dotbracket = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var structName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var startNumber = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  var self = this;\n  self.type = 'rna';\n  self.circularizeExternal = false;\n  self.seq = seq;\n  self.dotbracket = dotbracket; //i.e. ..((..))..\n\n  self.structName = structName;\n  self.circular = false;\n\n  if (self.dotbracket.slice(-1) == '*') {\n    //circular RNA\n    self.dotbracket = self.dotbracket.slice(0, -1);\n    self.circular = true;\n  }\n\n  self.uid = slugid__WEBPACK_IMPORTED_MODULE_1___default.a.nice();\n  self.elements = []; //store the elements and the\n  //nucleotides they contain\n\n  self.pseudoknotPairs = [];\n  self.nucsToNodes = {};\n\n  self.addUids = function (uids) {\n    var nucleotideNodes = self.nodes.filter(function (d) {\n      return d.nodeType == 'nucleotide';\n    });\n\n    for (var i = 0; i < uids.length && i < nucleotideNodes.length; i++) {\n      nucleotideNodes[i].uid = uids[i];\n    }\n\n    return self;\n  };\n\n  self.computePairtable = function () {\n    self.pairtable = _rnautils_js__WEBPACK_IMPORTED_MODULE_0__[\"rnaUtilities\"].dotbracketToPairtable(self.dotbracket);\n  };\n\n  self.removeBreaks = function (targetString) {\n    // Remove all chain breaks (denoted with a '&', which indicate\n    // that the input represents more than one strand)\n    var breaks = [];\n    var breakIndex = -1;\n\n    while ((breakIndex = targetString.indexOf('&')) >= 0) {\n      breaks.push(breakIndex);\n      targetString = targetString.substring(0, breakIndex) + targetString.substring(breakIndex + 1, targetString.length);\n    }\n\n    return {\n      targetString: targetString,\n      breaks: breaks\n    };\n  };\n\n  var ret = self.removeBreaks(self.dotbracket);\n  self.dotbracket = ret.targetString;\n  self.dotBracketBreaks = ret.breaks;\n  ret = self.removeBreaks(self.seq);\n  self.seq = ret.targetString;\n  self.seqBreaks = ret.breaks;\n  self.rnaLength = self.dotbracket.length;\n\n  if (!Object(_rnautils_js__WEBPACK_IMPORTED_MODULE_0__[\"arraysEqual\"])(self.dotBracketBreaks, self.seqBreaks)) {\n    console.log('WARNING: Sequence and structure breaks not equal');\n    console.log('WARNING: Using the breaks in the structure');\n  }\n\n  self.computePairtable();\n\n  self.addPositions = function (nodeType, positions) {\n    var labelNodes = self.nodes.filter(function (d) {\n      return d.nodeType == nodeType;\n    });\n\n    for (var i = 0; i < labelNodes.length; i++) {\n      labelNodes[i].x = positions[i][0];\n      labelNodes[i].y = positions[i][1];\n    }\n\n    return self;\n  };\n\n  self.breakNodesToFakeNodes = function () {\n    // convert all the nodes following breaks to fake nodes\n    var labelNodes = self.nodes.filter(function (d) {\n      return d.nodeType == 'nucleotide';\n    }); // if a node was an artifical break node, convert it to a middle\n\n    for (var i = 0; i < labelNodes.length; i++) {\n      if (self.dotBracketBreaks.indexOf(i) >= 0) {\n        labelNodes[i].nodeType = 'middle';\n        labelNodes[i + 1].nodeType = 'middle';\n      }\n    }\n\n    var _loop = function _loop(_i) {\n      broken = false; // change the elemType of the other nodes in the element containing\n      // the break\n\n      for (var j = 0; j < self.elements[_i][2].length; j++) {\n        if (self.dotBracketBreaks.indexOf(self.elements[_i][2][j]) >= 0) broken = true;\n      }\n\n      if (broken) {\n        self.elements[_i][2].map(function (x) {\n          if (x == 0) return;\n          self.nodes[x - 1].elemType = 'e';\n        });\n      } else {\n        self.elements[_i][2].map(function (x) {\n          if (x == 0) return;\n          self.nodes[x - 1].elemType = self.elements[_i][0];\n        });\n      }\n    };\n\n    for (var _i = 0; _i < self.elements.length; _i++) {\n      var broken;\n\n      _loop(_i);\n    }\n\n    return self;\n  };\n\n  self.getPositions = function (nodeType) {\n    var positions = [];\n    var nucleotideNodes = self.nodes.filter(function (d) {\n      return d.nodeType == nodeType;\n    });\n\n    for (var i = 0; i < nucleotideNodes.length; i++) {\n      positions.push([nucleotideNodes[i].x, nucleotideNodes[i].y]);\n    }\n\n    return positions;\n  };\n\n  self.getUids = function () {\n    /* Get the positions of each node so that they\n     * can be passed to elementsToJson later\n     */\n    var uids = [];\n\n    for (var i = 0; i < self.dotbracket.length; i++) {\n      uids.push(self.nodes[i].uid);\n    }\n\n    return uids;\n  };\n\n  self.reinforceStems = function () {\n    var pt = self.pairtable;\n    var relevantElements = self.elements.filter(function (d) {\n      return d[0] == 's' && d[2].length >= 4;\n    });\n\n    for (var i = 0; i < relevantElements.length; i++) {\n      var allNucs = relevantElements[i][2];\n\n      var _nucs = allNucs.slice(0, allNucs.length / 2);\n\n      for (var j = 0; j < _nucs.length - 1; j++) {\n        self.addFakeNode([_nucs[j], _nucs[j + 1], pt[_nucs[j + 1]], pt[_nucs[j]]]);\n      }\n    }\n\n    return self;\n  };\n\n  self.reinforceLoops = function () {\n    /*\n     * Add a set of fake nodes to enforce the structure\n     */\n    var filterNucs = function filterNucs(d) {\n      return d !== 0 && d <= self.dotbracket.length;\n    };\n\n    for (var i = 0; i < self.elements.length; i++) {\n      if (self.elements[i][0] == 's' || !self.circularizeExternal && self.elements[i][0] == 'e') continue;\n      var nucs = self.elements[i][2].filter(filterNucs);\n\n      if (self.elements[i][0] == 'e') {\n        var newNode1 = {\n          'name': '',\n          'num': -3,\n          //'radius': 18 * radius -6,\n          'radius': 0,\n          'rna': self,\n          'nodeType': 'middle',\n          'elemType': 'f',\n          'nucs': [],\n          'x': self.nodes[self.rnaLength - 1].x,\n          'y': self.nodes[self.rnaLength - 1].y,\n          'px': self.nodes[self.rnaLength - 1].px,\n          'py': self.nodes[self.rnaLength - 1].py,\n          'uid': slugid__WEBPACK_IMPORTED_MODULE_1___default.a.nice()\n        };\n        var newNode2 = {\n          'name': '',\n          'num': -2,\n          //'radius': 18 * radius -6,\n          'radius': 0,\n          'rna': self,\n          'nodeType': 'middle',\n          'elemType': 'f',\n          'nucs': [],\n          'x': self.nodes[0].x,\n          'y': self.nodes[0].y,\n          'px': self.nodes[0].px,\n          'py': self.nodes[0].py,\n          'uid': slugid__WEBPACK_IMPORTED_MODULE_1___default.a.nice()\n        };\n        nucs.push(self.nodes.length + 1);\n        nucs.push(self.nodes.length + 2);\n        self.nodes.push(newNode1);\n        self.nodes.push(newNode2);\n      }\n\n      self.addFakeNode(nucs);\n    }\n\n    return self;\n  };\n\n  self.updateLinkUids = function () {\n    for (var i = 0; i < self.links.length; i++) {\n      self.links[i].uid = self.links[i].source.uid + self.links[i].target.uid;\n    }\n\n    return self;\n  };\n\n  self.addFakeNode = function (nucs) {\n    var linkLength = 18; //make sure this is consistent with the value in force.js\n\n    var nodeWidth = 6;\n    var angle = 3.1415 * 2 / (2 * nucs.length);\n    var radius = linkLength / (2 * Math.tan(angle));\n    var fakeNodeUid = '';\n\n    for (var i = 0; i < nucs.length; i++) {\n      fakeNodeUid += self.nodes[nucs[i] - 1].uid;\n    }\n\n    var newNode = {\n      'name': '',\n      'num': -1,\n      //'radius': 18 * radius -6,\n      'radius': radius,\n      'rna': self,\n      'nodeType': 'middle',\n      'elemType': 'f',\n      'nucs': nucs,\n      'uid': fakeNodeUid\n    };\n    self.nodes.push(newNode);\n    var newX = 0;\n    var newY = 0;\n    var coordsCounted = 0;\n    angle = (nucs.length - 2) * 3.14159 / (2 * nucs.length);\n    radius = 0.5 / Math.cos(angle);\n\n    for (var j = 0; j < nucs.length; j++) {\n      if (nucs[j] === 0 || nucs[j] > self.dotbracket.length) continue; //link to the center node\n\n      self.links.push({\n        'source': self.nodes[nucs[j] - 1],\n        'target': self.nodes[self.nodes.length - 1],\n        'linkType': 'fake',\n        'value': radius,\n        'uid': slugid__WEBPACK_IMPORTED_MODULE_1___default.a.nice()\n      });\n\n      if (nucs.length > 4) {\n        //link across the loop\n        self.links.push({\n          'source': self.nodes[nucs[j] - 1],\n          'target': self.nodes[nucs[(j + Math.floor(nucs.length / 2)) % nucs.length] - 1],\n          'linkType': 'fake',\n          'value': radius * 2,\n          'uid': slugid__WEBPACK_IMPORTED_MODULE_1___default.a.nice()\n        });\n      }\n\n      var ia = (nucs.length - 2) * 3.14159 / nucs.length;\n      var c = 2 * Math.cos(3.14159 / 2 - ia / 2); //link to over-neighbor\n\n      self.links.push({\n        'source': self.nodes[nucs[j] - 1],\n        'target': self.nodes[nucs[(j + 2) % nucs.length] - 1],\n        'linkType': 'fake',\n        'value': c\n      }); // calculate the mean of the coordinats in this loop\n      // and place the fake node there\n\n      var fromNode = self.nodes[nucs[j] - 1];\n\n      if ('x' in fromNode) {\n        newX += fromNode.x;\n        newY += fromNode.y;\n        coordsCounted += 1;\n      }\n    }\n\n    if (coordsCounted > 0) {\n      // the nucleotides had set positions so we can calculate the position\n      // of the fake node\n      newNode.x = newX / coordsCounted;\n      newNode.y = newY / coordsCounted;\n      newNode.px = newNode.x;\n      newNode.py = newNode.y;\n    }\n\n    return self;\n  };\n\n  self.connectFakeNodes = function () {\n    var linkLength = 18; // We want to be able to connect all of the fake nodes\n    // and create a structure consisting of just them\n\n    var filterOutNonFakeNodes = function filterOutNonFakeNodes(d) {\n      return d.nodeType == 'middle';\n    };\n\n    var nucsToNodes = {};\n    var fakeNodes = self.nodes.filter(filterOutNonFakeNodes);\n    var linked = {}; // initialize the nucleotides to nodes\n\n    for (var i = 1; i <= self.nodes.length; i++) {\n      nucsToNodes[i] = [];\n    }\n\n    for (var i = 0; i < fakeNodes.length; i++) {\n      var thisNode = fakeNodes[i]; // each fake node represents a certain set of nucleotides (thisNode.nucs)\n\n      for (var j = 0; j < thisNode.nucs.length; j++) {\n        var thisNuc = thisNode.nucs[j]; // check to see if this nucleotide has been seen in another fake node\n        // if it has, then we add a link between the two nodes\n\n        for (var k = 0; k < nucsToNodes[thisNuc].length; k++) {\n          if (JSON.stringify([nucsToNodes[thisNuc][k].uid, thisNode.uid].sort()) in linked) continue; //already linked\n\n          var distance = nucsToNodes[thisNuc][k].radius + thisNode.radius;\n          self.links.push({\n            'source': nucsToNodes[thisNuc][k],\n            'target': thisNode,\n            'value': distance / linkLength,\n            'linkType': 'fake_fake'\n          }); // note that we've already seen this link\n\n          linked[JSON.stringify([nucsToNodes[thisNuc][k].uid, thisNode.uid].sort())] = true;\n        }\n\n        nucsToNodes[thisNuc].push(thisNode);\n      }\n    }\n\n    return self;\n  };\n\n  self.addExtraLinks = function (extraLinks) {\n    if (typeof extraLinks == 'undefined') return self;\n\n    for (var i = 0; i < extraLinks.length; i++) {\n      var source = self.getNodeFromNucleotides(extraLinks[i].from);\n      var target = self.getNodeFromNucleotides(extraLinks[i].to);\n      var newLink = {\n        'source': source,\n        'target': target,\n        'linkType': 'extra',\n        'extraLinkType': extraLinks[i].linkType,\n        'uid': slugid__WEBPACK_IMPORTED_MODULE_1___default.a.nice()\n      };\n      self.links.push(newLink);\n    }\n\n    return self;\n  };\n\n  self.elementsToJson = function () {\n    /* Convert a set of secondary structure elements to a json\n     * representation of the graph that can be used with d3's\n     * force-directed layout to generate a visualization of\n     * the structure.\n     */\n    var pt = self.pairtable;\n    var elements = self.elements;\n    self.nodes = [];\n    self.links = []; //create a reverse lookup so we can find out the type\n    //of element that a node is part of\n\n    var elemTypes = {}; //sort so that we count stems last\n\n    self.elements.sort();\n\n    for (var i = 0; i < self.elements.length; i++) {\n      var nucs = self.elements[i][2];\n\n      for (var j = 0; j < nucs.length; j++) {\n        elemTypes[nucs[j]] = self.elements[i][0];\n      }\n    }\n\n    for (var _i2 = 1; _i2 <= pt[0]; _i2++) {\n      var nodeName = self.seq[_i2 - 1];\n\n      if (self.dotBracketBreaks.indexOf(_i2 - 1) >= 0 || self.dotBracketBreaks.indexOf(_i2 - 2) >= 0) {\n        nodeName = '';\n      } //create a node for each nucleotide\n\n\n      self.nodes.push({\n        'name': nodeName,\n        'num': startNumber + _i2 - 1,\n        'radius': 5,\n        'rna': self,\n        'nodeType': 'nucleotide',\n        'structName': self.structName,\n        'elemType': elemTypes[_i2],\n        'uid': slugid__WEBPACK_IMPORTED_MODULE_1___default.a.nice(),\n        'linked': false\n      });\n    }\n\n    for (var _i3 = 0; _i3 < self.nodes.length; _i3++) {\n      if (_i3 === 0) self.nodes[_i3].prevNode = null;else {\n        self.nodes[_i3].prevNode = self.nodes[_i3 - 1];\n      }\n      if (_i3 == self.nodes.length - 1) self.nodes[_i3].nextNode = null;else {\n        self.nodes[_i3].nextNode = self.nodes[_i3 + 1];\n      }\n    }\n\n    for (var _i4 = 1; _i4 <= pt[0]; _i4++) {\n      if (pt[_i4] !== 0) {\n        // base-pair links\n        self.links.push({\n          'source': self.nodes[_i4 - 1],\n          'target': self.nodes[pt[_i4] - 1],\n          'linkType': 'basepair',\n          'value': 1,\n          'uid': slugid__WEBPACK_IMPORTED_MODULE_1___default.a.nice()\n        });\n      }\n\n      if (_i4 > 1) {\n        // backbone links\n        if (self.dotBracketBreaks.indexOf(_i4 - 1) === -1 && self.dotBracketBreaks.indexOf(_i4 - 2) == -1 && self.dotBracketBreaks.indexOf(_i4 - 3) == -1) {\n          // there is no break in the strands here\n          // we can add a backbone link\n          self.links.push({\n            'source': self.nodes[_i4 - 2],\n            'target': self.nodes[_i4 - 1],\n            'linkType': 'backbone',\n            'value': 1,\n            'uid': slugid__WEBPACK_IMPORTED_MODULE_1___default.a.nice()\n          });\n          self.nodes[_i4 - 1].linked = true;\n        }\n      }\n    } //add the pseudoknot links\n\n\n    for (var _i5 = 0; _i5 < self.pseudoknotPairs.length; _i5++) {\n      self.links.push({\n        'source': self.nodes[self.pseudoknotPairs[_i5][0] - 1],\n        'target': self.nodes[self.pseudoknotPairs[_i5][1] - 1],\n        'linkType': 'pseudoknot',\n        'value': 1,\n        'uid': slugid__WEBPACK_IMPORTED_MODULE_1___default.a.nice()\n      });\n    }\n\n    if (self.circular) {\n      self.links.push({\n        'source': self.nodes[0],\n        'target': self.nodes[self.rnaLength - 1],\n        'linkType': 'backbone',\n        'value': 1,\n        'uid': slugid__WEBPACK_IMPORTED_MODULE_1___default.a.nice()\n      });\n    }\n\n    return self;\n  };\n\n  self.ptToElements = function (pt, level, i, j) {\n    /* Convert a pair table to a list of secondary structure\n     * elements:\n     *\n     * [['s',1,[2,3]]\n     *\n     * The 's' indicates that an element can be a stem. It can also be\n     * an interior loop ('i'), a hairpin loop ('h') or a multiloop ('m')\n     *\n     * The second number (1 in this case) indicates the depth or\n     * how many base pairs have to be broken to get to this element.\n     *\n     * Finally, there is the list of nucleotides which are part of\n     * of this element.\n     */\n    var elements = [];\n    var u5 = [i - 1];\n    var u3 = [j + 1];\n    if (i > j) return []; //iterate over the unpaired regions on either side\n    //this is either 5' and 3' unpaired if level == 0\n    //or an interior loop or a multiloop\n\n    for (; pt[i] === 0; i++) {\n      u5.push(i);\n    }\n\n    for (; pt[j] === 0; j--) {\n      u3.push(j);\n    }\n\n    if (i > j) {\n      //hairpin loop or one large unpaired molecule\n      u5.push(i);\n      if (level === 0) return [['e', level, u5.sort(numberSort)]];else {\n        // check to see if we have chain breaks due\n        // to multiple strands in the input\n        var external = false;\n        var left = [];\n        var right = [];\n\n        for (var k = 0; k < u5.length; k++) {\n          if (external) right.push(u5[k]);else left.push(u5[k]);\n          if (self.dotBracketBreaks.indexOf(u5[k]) >= 0) external = true;\n        }\n\n        if (external) {\n          return [['h', level, u5.sort(numberSort)]];\n        } else // if not, this is a simple hairpin loop\n          return [['h', level, u5.sort(numberSort)]];\n      }\n    }\n\n    if (pt[i] != j) {\n      //multiloop\n      var m = u5;\n      var k = i; // the nucleotide before and the starting nucleotide\n\n      m.push(k);\n\n      while (k <= j) {\n        // recurse into a stem\n        elements = elements.concat(self.ptToElements(pt, level, k, pt[k])); // add the nucleotides between stems\n\n        m.push(pt[k]);\n        k = pt[k] + 1;\n\n        for (; pt[k] === 0 && k <= j; k++) {\n          m.push(k);\n        }\n\n        m.push(k);\n      }\n\n      m.pop();\n      m = m.concat(u3);\n\n      if (m.length > 0) {\n        if (level === 0) elements.push(['e', level, m.sort(numberSort)]);else elements.push(['m', level, m.sort(numberSort)]);\n      }\n\n      return elements;\n    }\n\n    if (pt[i] === j) {\n      //interior loop\n      u5.push(i);\n      u3.push(j);\n      var combined = u5.concat(u3);\n\n      if (combined.length > 4) {\n        if (level === 0) elements.push(['e', level, u5.concat(u3).sort(numberSort)]);else elements.push(['i', level, u5.concat(u3).sort(numberSort)]);\n      }\n    }\n\n    var s = []; //go through the stem\n\n    while (pt[i] === j && i < j) {\n      //one stem\n      s.push(i);\n      s.push(j);\n      i += 1;\n      j -= 1;\n      level += 1;\n    }\n\n    u5 = [i - 1];\n    u3 = [j + 1];\n    elements.push(['s', level, s.sort(numberSort)]);\n    return elements.concat(self.ptToElements(pt, level, i, j));\n  };\n\n  self.addLabels = function () {\n    var startNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var labelInterval = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n    if (labelInterval === 0) return self;\n\n    for (var i = 1; i <= self.rnaLength; i++) {\n      // add labels\n      if (i % labelInterval === 0) {\n        //create a node for each label\n        var newX = void 0,\n            newY = void 0;\n        var thisNode = self.nodes[i - 1];\n        var prevNode = void 0,\n            nextNode = void 0;\n        var prevVec = void 0,\n            nextVec = void 0;\n\n        if (self.rnaLength == 1) {\n          nextVec = [thisNode.x - 15, thisNode.y];\n          prevVec = [thisNode.x - 15, thisNode.y];\n        } else {\n          // if we're labelling the first node, then label it in relation to the last\n          if (i == 1) prevNode = self.nodes[self.rnaLength - 1];else prevNode = self.nodes[i - 2]; // if we're labelling the last node, then label it in relation to the first\n\n          if (i == self.rnaLength) nextNode = self.nodes[0];else nextNode = self.nodes[i]; // this nucleotide and its neighbors are paired\n\n          if (self.pairtable[nextNode.num - startNumber + 1] !== 0 && self.pairtable[prevNode.num - startNumber + 1] !== 0 && self.pairtable[thisNode.num - startNumber + 1] !== 0) {\n            prevNode = nextNode = self.nodes[self.pairtable[thisNode.num - startNumber + 1] - 1];\n          } // this node is paired but at least one of its neighbors is unpaired\n          // place the label in the direction of the two neighbors\n\n\n          if (self.pairtable[thisNode.num - startNumber + 1] !== 0 && (self.pairtable[nextNode.num - startNumber + 1] === 0 || self.pairtable[prevNode.num - startNumber + 1] === 0)) {\n            nextVec = [thisNode.x - nextNode.x, thisNode.y - nextNode.y];\n            prevVec = [thisNode.x - prevNode.x, thisNode.y - prevNode.y];\n          } else {\n            nextVec = [nextNode.x - thisNode.x, nextNode.y - thisNode.y];\n            prevVec = [prevNode.x - thisNode.x, prevNode.y - thisNode.y];\n          }\n        }\n\n        var combinedVec = [nextVec[0] + prevVec[0], nextVec[1] + prevVec[1]];\n        var vecLength = Math.sqrt(combinedVec[0] * combinedVec[0] + combinedVec[1] * combinedVec[1]);\n        var normedVec = [combinedVec[0] / vecLength, combinedVec[1] / vecLength];\n        var offsetVec = [-15 * normedVec[0], -15 * normedVec[1]];\n        newX = self.nodes[i - 1].x + offsetVec[0];\n        newY = self.nodes[i - 1].y + offsetVec[1];\n        var newNode = {\n          'name': i + startNumber - 1,\n          'num': -1,\n          'radius': 6,\n          'rna': self,\n          'nodeType': 'label',\n          'structName': self.structName,\n          'elemType': 'l',\n          'x': newX,\n          'y': newY,\n          'px': newX,\n          'py': newY,\n          'uid': slugid__WEBPACK_IMPORTED_MODULE_1___default.a.nice()\n        };\n        var newLink = {\n          'source': self.nodes[i - 1],\n          'target': newNode,\n          'value': 1,\n          'linkType': 'label_link',\n          'uid': slugid__WEBPACK_IMPORTED_MODULE_1___default.a.nice()\n        };\n        self.nodes.push(newNode);\n        self.links.push(newLink);\n      }\n    }\n\n    return self;\n  };\n\n  self.recalculateElements = function () {\n    self.removePseudoknots();\n    self.elements = self.ptToElements(self.pairtable, 0, 1, self.dotbracket.length);\n\n    if (self.circular) {\n      //check to see if the external loop is a hairpin or a multiloop\n      var externalLoop = self.elements.filter(function (d) {\n        if (d[0] == 'e') return true;\n      });\n\n      if (externalLoop.length > 0) {\n        eloop = externalLoop[0];\n        nucs = eloop[2].sort(numberSort);\n        prev = nucs[0];\n        hloop = true;\n        numGreater = 0;\n\n        for (var i = 1; i < nucs.length; i++) {\n          if (nucs[i] - prev > 1) {\n            numGreater += 1;\n          }\n\n          prev = nucs[i];\n        }\n\n        if (numGreater == 1) {\n          eloop[0] = 'h';\n        } else if (numGreater == 2) {\n          eloop[0] = 'i';\n        } else {\n          eloop[0] = 'm';\n        }\n      }\n    }\n\n    return self;\n  };\n\n  self.reassignLinkUids = function () {\n    // reassign uids to the links, corresponding to the uids of the two nodes\n    // they connect\n    var i;\n\n    for (var i = 0; i < self.links.length; i++) {\n      self.links[i].uid = self.links[i].source.uid + self.links[i].target.uid;\n    }\n\n    return self;\n  };\n\n  self.removePseudoknots = function () {\n    if (self.pairtable.length > 1) self.pseudoknotPairs = self.pseudoknotPairs.concat(_rnautils_js__WEBPACK_IMPORTED_MODULE_0__[\"rnaUtilities\"].removePseudoknotsFromPairtable(self.pairtable));\n    return self;\n  };\n\n  self.addPseudoknots = function () {\n    /* Add all of the pseudoknot pairs which are stored outside\n     * of the pairtable back to the pairtable\n     */\n    var pt = self.pairtable;\n    var pseudoknotPairs = self.pseudoknotPairs;\n\n    for (var i = 0; i < pseudoknotPairs.length; i++) {\n      pt[pseudoknotPairs[i][0]] = pseudoknotPairs[i][1];\n      pt[pseudoknotPairs[i][1]] = pseudoknotPairs[i][0];\n    }\n\n    self.pseudoknotPairs = [];\n    return self;\n  };\n\n  self.addName = function (name) {\n    if (typeof name == 'undefined') {\n      self.name = '';\n      return self;\n    } else {\n      self.name = name;\n      return self;\n    }\n  };\n\n  if (self.rnaLength > 0) self.recalculateElements();\n\n  self.getNodeFromNucleotides = function (nucs) {\n    /* Get a node given a nucleotide number or an array of nucleotide\n     * numbers indicating an element node */\n    if (Object.prototype.toString.call(nucs) === '[object Array]') {\n      for (var j = 0; j < self.nodes.length; j++) {\n        if ('nucs' in self.nodes[j]) {\n          if (self.nodes[j].nucs.equals(nucs)) {\n            return self.nodes[j];\n          }\n        }\n      }\n    } else {\n      for (var _j = 0; _j < self.nodes.length; _j++) {\n        if (self.nodes[_j].num == nucs) {\n          return self.nodes[_j];\n        }\n      }\n    }\n\n    console.log('ERROR: No node found for nucs:', nucs);\n    return null;\n  };\n}\nfunction moleculesToJson(moleculesJson) {\n  /* Convert a list of RNA and protein molecules to a list of RNAGraph\n   * ProteinGraph and extraLinks structure */\n  var nodes = {}; //index the nodes by uid\n\n  var graphs = [];\n  var extraLinks = []; // Create the graphs for each molecule\n\n  for (var i = 0; i < moleculesJson.molecules.length; i++) {\n    var molecule = moleculesJson.molecules[i];\n    var rg;\n\n    if (molecule.type == 'rna') {\n      rg = new RNAGraph(molecule.seq, molecule.ss, molecule.header);\n      rg.circularizeExternal = true;\n      rg.elementsToJson().addPositions('nucleotide', molecule.positions).addLabels().reinforceStems().reinforceLoops();\n    } else if (molecule.type == 'protein') {\n      rg = new ProteinGraph(molecule.header, molecule.size);\n    }\n\n    rg.addUids(molecule.uids);\n\n    for (var j = 0; j < rg.nodes.length; j++) {\n      nodes[rg.nodes[j].uid] = rg.nodes[j];\n    }\n\n    graphs.push(rg);\n  } //Add the extra links\n\n\n  for (var i = 0; i < moleculesJson.extraLinks.length; i++) {\n    link = moleculesJson.extraLinks[i];\n    link.source = nodes[link.source];\n    link.target = nodes[link.target];\n    link.uid = slugid__WEBPACK_IMPORTED_MODULE_1___default.a.nice();\n    extraLinks.push(link);\n  }\n\n  return {\n    'graphs': graphs,\n    'extraLinks': extraLinks\n  };\n}\n;\n\n//# sourceURL=webpack://%5Bname%5D/./scripts/rnagraph.js?");

/***/ }),

/***/ "./scripts/rnaplot.js":
/*!****************************!*\
  !*** ./scripts/rnaplot.js ***!
  \****************************/
/*! exports provided: rnaPlot */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rnaPlot\", function() { return rnaPlot; });\n/* harmony import */ var _rnagraph_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rnagraph.js */ \"./scripts/rnagraph.js\");\n/* harmony import */ var _simplernaplot_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./simplernaplot.js */ \"./scripts/simplernaplot.js\");\n/* harmony import */ var _naview_naview_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./naview/naview.js */ \"./scripts/naview/naview.js\");\n/* harmony import */ var _styles_rnaplot_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../styles/rnaplot.css */ \"./styles/rnaplot.css\");\n/* harmony import */ var _styles_rnaplot_css__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_styles_rnaplot_css__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\nfunction rnaPlot() {\n  var passedOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var options = {\n    'width': 300,\n    'height': 300,\n    'nucleotideRadius': 5,\n    'rnaEdgePadding': 1,\n    // how far the leftmost, rightmost, topmost and bottomost\n    // nucleotides are from the edge of the plot\n    'labelInterval': 10,\n    'showNucleotideLabels': true,\n    'startNucleotideNumber': 1,\n    'bundleExternalLinks': false,\n    'rnaLayout': 'simple',\n    // simple or naview\n    'namePosition': '0 0' // for x and y either 0, 0.5 or 1\n\n  };\n  var options = Object.assign(options, passedOptions);\n  var xScale, yScale;\n\n  function createTransformToFillViewport(xValues, yValues) {\n    // create transform that will scale the x and y values so that\n    // they fill the available viewport\n    var xExtent = d3.extent(xValues);\n    var yExtent = d3.extent(yValues); // add the radius of the nucleotides\n\n    xExtent[0] -= options.nucleotideRadius + options.rnaEdgePadding;\n    yExtent[0] -= options.nucleotideRadius + options.rnaEdgePadding;\n    xExtent[1] += options.nucleotideRadius + options.rnaEdgePadding;\n    yExtent[1] += options.nucleotideRadius + options.rnaEdgePadding; // find out how wide and height the molecule\n\n    var xRange = xExtent[1] - xExtent[0];\n    var yRange = yExtent[1] - yExtent[0]; // how much wider / taller is it than the available viewport\n\n    var xExtra = xRange - options.width;\n    var yExtra = yRange - options.height; // once we have a scale for one dimension, we can create the scale for the other\n    // keeping the same expansion / shrinking ratio\n\n    function createOtherScale(firstScale, newDomain, newRange) {\n      var scaleFactor = (firstScale.range()[1] - firstScale.range()[0]) / (firstScale.domain()[1] - firstScale.domain()[0]);\n      var newWidth = (newDomain[1] - newDomain[0]) * scaleFactor;\n      var newMargin = (newRange[1] - newRange[0] - newWidth) / 2;\n      return {\n        'scaleFactor': scaleFactor,\n        'scale': d3.scale.linear().domain(newDomain).range([newRange[0] + newMargin, newRange[1] - newMargin])\n      };\n    }\n\n    var ret;\n\n    if (xExtra > yExtra) {\n      // we have to shrink more in the x-dimension than the y\n      xScale = d3.scale.linear().domain(xExtent).range([0, options.width]);\n      ret = createOtherScale(xScale, yExtent, [0, options.height]);\n      yScale = ret.scale;\n    } else {\n      // we have to shrink more in the x-dimension than the y\n      yScale = d3.scale.linear().domain(yExtent).range([0, options.height]);\n      ret = createOtherScale(yScale, xExtent, [0, options.width]);\n      xScale = ret.scale;\n    }\n\n    var xOffset = xScale.range()[0] - xScale.domain()[0];\n    var yOffset = yScale.range()[0] - yScale.domain()[0];\n    return 'translate(' + -(xScale.domain()[0] * ret.scaleFactor - xScale.range()[0]) + ',' + -(yScale.domain()[0] * ret.scaleFactor - yScale.range()[0]) + ')' + 'scale(' + ret.scaleFactor + ')';\n  }\n\n  function createNucleotides(selection, nucleotideNodes) {\n    // create groupings for each nucleotide and label\n    var gs = selection.selectAll('.rna-base').data(nucleotideNodes).enter().append('svg:g').attr('transform', function (d) {\n      return 'translate(' + d.x + ',' + d.y + ')';\n    });\n    var circles = gs.append('svg:circle').attr('data-base', function (d) {\n      if (d.name) {\n        return d.name.toLowerCase();\n      }\n    }).attr('r', options.nucleotideRadius).classed('rna-base', true);\n\n    if (options.showNucleotideLabels) {\n      var nucleotideLabels = gs.append('svg:text').text(function (d) {\n        return d.name;\n      }).attr('text-anchor', 'middle').attr('dominant-baseline', 'central').classed('nucleotide-label', true).append('svg:title').text(function (d) {\n        return d.struct_name + ':' + d.num;\n      });\n    }\n  }\n\n  function createLabels(selection, labelNodes) {\n    // create groupings for each nucleotide and label\n    var gs = selection.selectAll('.rnaLabel').data(labelNodes).enter().append('svg:g').attr('transform', function (d) {\n      return 'translate(' + d.x + ',' + d.y + ')';\n    });\n    var circles = gs.append('svg:circle').attr('r', options.nucleotideRadius).classed('rna-base', true).classed('label', true);\n    var numberLabels = gs.append('svg:text').text(function (d) {\n      return d.name;\n    }).attr('text-anchor', 'middle').attr('font-weight', 'bold').attr('dominant-baseline', 'central').classed('number-label', true);\n  }\n\n  function createName(selection, name) {\n    var nameLabel = selection.append('svg:text') //.attr('dy', -10)\n    .classed('rna-name', true).attr('text-anchor', 'middle').attr('alignment-baseline', 'central').text(name);\n    var xyPos = options.namePosition.split(\" \", 2); // 0 0.5 1\n\n    var xy = [];\n    var textBBox = nameLabel.node().getBBox();\n    var textSize = [textBBox.width, textBBox.height];\n    var plotSize = [options.width, options.height];\n\n    for (var p in [0, 1]) {\n      switch (xyPos[p]) {\n        case '0':\n          xy[p] = textSize[p] / 2;\n          break;\n\n        case '1':\n          xy[p] = plotSize[p] - textSize[p] / 2;\n          break;\n\n        case '0.5':\n          xy[p] = plotSize[p] / 2;\n          break;\n      }\n    }\n\n    nameLabel.attr('x', xy[0]).attr('y', xy[1]);\n  }\n\n  function makeExternalLinksBundle(selection, links) {\n    var nodesDict = {};\n    var linksList = [];\n    links = links.filter(function (d) {\n      return d.linkType == 'correct' || d.linkType == 'incorrect' || d.linkType == 'extra';\n    });\n    selection.selectAll('[link-type=extra]').remove();\n\n    for (var i = 0; i < links.length; i++) {\n      if (links[i].source === null || links[i].target === null) continue;\n      nodesDict[links[i].source.uid] = links[i].source;\n      nodesDict[links[i].target.uid] = links[i].target;\n      linksList.push({\n        'source': links[i].source.uid,\n        'target': links[i].target.uid,\n        'linkType': links[i].linkType,\n        'extraLinkType': links[i].extraLinkType\n      });\n    }\n\n    var fbundling = d3.ForceEdgeBundling().nodes(nodesDict).edges(linksList).compatibility_threshold(0.8).step_size(0.2);\n    var results = fbundling();\n    var d3line = d3.svg.line().x(function (d) {\n      return d.x;\n    }).y(function (d) {\n      return d.y;\n    }).interpolate('linear');\n\n    for (var i = 0; i < results.length; i++) {\n      var edge_subpoint_data = results[i]; // for each of the arrays in the results\n      // draw a line between the subdivions points for that edge\n\n      selection.append('path').attr('d', d3line(edge_subpoint_data)).style('fill', 'none').attr('link-type', function (d) {\n        return linksList[i].linkType;\n      }).attr('extra-link-type', function (d) {\n        return linksList[i].extraLinkType;\n      }).style('stroke-opacity', 0.4); //use opacity as blending\n    }\n  }\n\n  function createLinks(selection, links) {\n    links = links.filter(function (d) {\n      return d.source !== null && d.target !== null;\n    });\n    var gs = selection.selectAll('.rna-link').data(links).enter().append('svg:line').attr('x1', function (d) {\n      return d.source.x;\n    }).attr('x2', function (d) {\n      return d.target.x;\n    }).attr('y1', function (d) {\n      return d.source.y;\n    }).attr('y2', function (d) {\n      return d.target.y;\n    }).attr('link-type', function (d) {\n      return d.linkType;\n    }).attr('extra-link-type', function (d) {\n      return d.extraLinkType;\n    }).classed('rna-link', true);\n  }\n\n  function chart(selection) {\n    selection.each(function (data) {\n      var plot = d3.select(this).append('g').classed('rnaplot', true); // data should be a dictionary containing at least a structure\n      // and possibly a sequence\n\n      var rg = new _rnagraph_js__WEBPACK_IMPORTED_MODULE_0__[\"RNAGraph\"](data.sequence, data.structure, data.name, options.startNucleotideNumber).recalculateElements().elementsToJson().addName(data.name);\n      data.rnaGraph = rg; // calculate the position of each nucleotide\n      // the positions of the labels will be calculated in\n      // the addLabels function\n\n      var positions = [];\n\n      if (options.rnaLayout === 'naview') {\n        var naview = new _naview_naview_js__WEBPACK_IMPORTED_MODULE_2__[\"NAView\"]();\n        var naViewPositions = naview.naview_xy_coordinates(rg.pairtable);\n\n        for (var i = 0; i < naViewPositions.nbase; i++) {\n          positions.push([naViewPositions.x[i], naViewPositions.y[i]]);\n        }\n      } else {\n        positions = Object(_simplernaplot_js__WEBPACK_IMPORTED_MODULE_1__[\"simpleXyCoordinates\"])(rg.pairtable);\n      }\n\n      rg.addPositions('nucleotide', positions) //.reinforceStems()\n      //.reinforceLoops()\n      //.addExtraLinks(data.extraLinks)\n      .addLabels(options.startNucleotideNumber, options.labelInterval); // create a transform that will fit the molecule to the\n      // size of the viewport (canvas, svg, whatever)            \n\n      var fillViewportTransform = createTransformToFillViewport(rg.nodes.map(function (d) {\n        return d.x;\n      }), rg.nodes.map(function (d) {\n        return d.y;\n      }));\n      plot.attr('transform', fillViewportTransform);\n      var nucleotideNodes = rg.nodes.filter(function (d) {\n        return d.nodeType == 'nucleotide';\n      });\n      var labelNodes = rg.nodes.filter(function (d) {\n        return d.nodeType == 'label';\n      });\n      var links = rg.links;\n      createLinks(plot, links);\n      createNucleotides(plot, nucleotideNodes);\n      createLabels(plot, labelNodes);\n      createName(d3.select(this), data.name);\n\n      if (options.bundleExternalLinks) {\n        makeExternalLinksBundle(plot, links);\n      }\n    });\n  }\n\n  chart.width = function (_) {\n    if (!arguments.length) return options.width;\n    options.width = _;\n    return chart;\n  };\n\n  chart.height = function (_) {\n    if (!arguments.length) return options.height;\n    options.height = _;\n    return chart;\n  };\n\n  chart.showNucleotideLabels = function (_) {\n    if (!arguments.length) return options.showNucleotideLabels;\n    options.showNucleotideLabels = _;\n    return chart;\n  };\n\n  chart.rnaEdgePadding = function (_) {\n    if (!arguments.length) return options.rnaEdgePadding;\n    options.rnaEdgePadding = _;\n    return chart;\n  };\n\n  chart.nucleotideRadius = function (_) {\n    if (!arguments.length) return options.nucleotideRadius;\n    options.nucleotideRadius = _;\n    return chart;\n  };\n\n  chart.labelInterval = function (_) {\n    if (!arguments.length) return options.labelInterval;\n    options.labelInterval = _;\n    return chart;\n  };\n\n  chart.showNucleotideLabels = function (_) {\n    if (!arguments.length) return options.showNucleotideLabels;\n    options.showNucleotideLabels = _;\n    return chart;\n  };\n\n  chart.startNucleotideNumber = function (_) {\n    if (!arguments.length) return options.startNucleotideNumber;\n    options.startNucleotideNumber = _;\n    return chart;\n  };\n\n  chart.bundleExternalLinks = function (_) {\n    if (!arguments.length) return options.bundleExternalLinks;\n    options.bundleExternalLinks = _;\n    return chart;\n  };\n\n  chart.rnaLayout = function (_) {\n    if (!arguments.length) return options.rnaLayout;\n    options.rnaLayout = _;\n    return chart;\n  };\n\n  chart.namePosition = function (_) {\n    if (!arguments.length) return options.namePosition;\n    options.namePosition = _;\n    return chart;\n  };\n\n  return chart;\n}\n\n//# sourceURL=webpack://%5Bname%5D/./scripts/rnaplot.js?");

/***/ }),

/***/ "./scripts/rnautils.js":
/*!*****************************!*\
  !*** ./scripts/rnautils.js ***!
  \*****************************/
/*! exports provided: arraysEqual, RNAUtilities, rnaUtilities, ColorScheme */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"arraysEqual\", function() { return arraysEqual; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RNAUtilities\", function() { return RNAUtilities; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rnaUtilities\", function() { return rnaUtilities; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ColorScheme\", function() { return ColorScheme; });\nvar numberSort = function numberSort(a, b) {\n  return a - b;\n};\n\nfunction arraysEqual(a, b) {\n  // courtesy of \n  // http://stackoverflow.com/questions/3115982/how-to-check-if-two-arrays-are-equal-with-javascript\n  if (a === b) return true;\n  if (a === null || b === null) return false;\n  if (a.length != b.length) return false; // If you don't care about the order of the elements inside\n  // the array, you should sort both arrays here.\n\n  for (var i = 0; i < a.length; ++i) {\n    if (a[i] !== b[i]) return false;\n  }\n\n  return true;\n}\nfunction RNAUtilities() {\n  var self = this; // the brackets to use when constructing dotbracket strings\n  // with pseudoknots\n\n  self.bracketLeft = \"([{<ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\n  self.bracketRight = \")]}>abcdefghijklmnopqrstuvwxyz\".split(\"\");\n\n  self.inverseBrackets = function (bracket) {\n    var res = {};\n\n    for (var i = 0; i < bracket.length; i++) {\n      res[bracket[i]] = i;\n    }\n\n    return res;\n  };\n\n  self.maximumMatching = function maximumMatching(pt) {\n    // Courtesy of the great Ronny Lorenz\n    var n = pt[0];\n    var TURN = 0; //minimal number of nucleotides in the hairpin\n\n    /* array init */\n\n    var mm = new Array(n + 1);\n\n    for (var i = 0; i <= n; i++) {\n      mm[i] = new Array(n + 1);\n\n      for (var j = i; j <= n; j++) {\n        mm[i][j] = 0;\n      }\n    }\n\n    var maximum = 0;\n    /* actual computation */\n\n    for (var i = n - TURN - 1; i > 0; i--) {\n      for (var j = i + TURN + 1; j <= n; j++) {\n        maximum = mm[i][j - 1];\n\n        for (var l = j - TURN - 1; l >= i; l--) {\n          if (pt[l] === j) {\n            // we have a base pair here\n            maximum = Math.max(maximum, (l > i ? mm[i][l - 1] : 0) + 1 + (j - l - 1 > 0 ? mm[l + 1][j - 1] : 0));\n          }\n        }\n\n        mm[i][j] = maximum;\n      }\n    }\n\n    maximum = mm[1][n];\n    return mm;\n  };\n\n  self.backtrackMaximumMatching = function (mm, oldPt) {\n    var pt = Array.apply(null, Array(mm.length)).map(function () {\n      return 0;\n    }); //create an array containing zeros\n\n    self.mmBt(mm, pt, oldPt, 1, mm.length - 1);\n    return pt;\n  };\n\n  self.mmBt = function (mm, pt, oldPt, i, j) {\n    // Create a pairtable from the backtracking\n    var maximum = mm[i][j];\n    var TURN = 0;\n    if (j - i - 1 < TURN) return;\n    /* no more pairs */\n\n    if (mm[i][j - 1] == maximum) {\n      /* j is unpaired */\n      self.mmBt(mm, pt, oldPt, i, j - 1);\n      return;\n    }\n\n    for (var q = j - TURN - 1; q >= i; q--) {\n      /* j is paired with some q */\n      if (oldPt[j] !== q) continue;\n      var leftPart = q > i ? mm[i][q - 1] : 0;\n      var enclosedPart = j - q - 1 > 0 ? mm[q + 1][j - 1] : 0;\n\n      if (leftPart + enclosedPart + 1 == maximum) {\n        // there's a base pair between j and q\n        pt[q] = j;\n        pt[j] = q;\n        if (i < q) self.mmBt(mm, pt, oldPt, i, q - 1);\n        self.mmBt(mm, pt, oldPt, q + 1, j - 1);\n        return;\n      }\n    } //alert(i + \",\" + j + \": backtracking failed!\");\n\n\n    console.log('FAILED!!!' + i + ',' + j + ': backtracking failed!');\n  };\n\n  self.dotbracketToPairtable = function (dotbracket) {\n    // create an array and initialize it to 0\n    var pt = Array.apply(null, new Array(dotbracket.length + 1)).map(Number.prototype.valueOf, 0); //  the first element is always the length of the RNA molecule\n\n    pt[0] = dotbracket.length; // store the pairing partners for each symbol\n\n    var stack = {};\n\n    for (var i = 0; i < self.bracketLeft.length; i++) {\n      stack[i] = [];\n    } // lookup the index of each symbol in the bracket array\n\n\n    var inverseBracketLeft = self.inverseBrackets(self.bracketLeft);\n    var inverseBracketRight = self.inverseBrackets(self.bracketRight);\n\n    for (var i = 0; i < dotbracket.length; i++) {\n      var a = dotbracket[i];\n      var ni = i + 1;\n\n      if (a == '.' || a == 'o') {\n        // unpaired\n        pt[ni] = 0;\n      } else {\n        if (a in inverseBracketLeft) {\n          // open pair?\n          stack[inverseBracketLeft[a]].push(ni);\n        } else if (a in inverseBracketRight) {\n          // close pair?\n          var j = stack[inverseBracketRight[a]].pop();\n          pt[ni] = j;\n          pt[j] = ni;\n        } else {\n          throw \"Unknown symbol in dotbracket string\";\n        }\n      }\n    }\n\n    for (var key in stack) {\n      if (stack[key].length > 0) {\n        throw \"Unmatched base at position \" + stack[key][0];\n      }\n    }\n\n    return pt;\n  };\n\n  self.insertIntoStack = function (stack, i, j) {\n    var k = 0;\n\n    while (stack[k].length > 0 && stack[k][stack[k].length - 1] < j) {\n      k += 1;\n    }\n\n    stack[k].push(j);\n    return k;\n  };\n\n  self.deleteFromStack = function (stack, j) {\n    var k = 0;\n\n    while (stack[k].length === 0 || stack[k][stack[k].length - 1] != j) {\n      k += 1;\n    }\n\n    stack[k].pop();\n    return k;\n  };\n\n  self.pairtableToDotbracket = function (pt) {\n    // store the pairing partners for each symbol\n    var stack = {};\n\n    for (var i = 0; i < pt[0]; i++) {\n      stack[i] = [];\n    }\n\n    var seen = {};\n    var res = \"\";\n    var i;\n\n    for (var i = 1; i < pt[0] + 1; i++) {\n      if (pt[i] !== 0 && pt[i] in seen) {\n        throw \"Invalid pairtable contains duplicate entries\";\n      }\n\n      seen[pt[i]] = true;\n\n      if (pt[i] === 0) {\n        res += '.';\n      } else {\n        if (pt[i] > i) {\n          res += self.bracketLeft[self.insertIntoStack(stack, i, pt[i])];\n        } else {\n          res += self.bracketRight[self.deleteFromStack(stack, i)];\n        }\n      }\n    }\n\n    return res;\n  };\n\n  self.findUnmatched = function (pt, from, to) {\n    /*\n     * Find unmatched nucleotides in this molecule.\n     */\n    var toRemove = [];\n    var unmatched = [];\n    var origFrom = from;\n    var origTo = to;\n    var i;\n\n    for (var i = from; i <= to; i++) {\n      if (pt[i] !== 0 && (pt[i] < from || pt[i] > to)) unmatched.push([i, pt[i]]);\n    }\n\n    for (var i = origFrom; i <= origTo; i++) {\n      while (pt[i] === 0 && i <= origTo) {\n        i++;\n      }\n\n      to = pt[i];\n\n      while (pt[i] === to) {\n        i++;\n        to--;\n      }\n\n      toRemove = toRemove.concat(self.findUnmatched(pt, i, to));\n    }\n\n    if (unmatched.length > 0) toRemove.push(unmatched);\n    return toRemove;\n  };\n\n  self.removePseudoknotsFromPairtable = function (pt) {\n    /* Remove the pseudoknots from this structure in such a fashion\n     * that the least amount of base-pairs need to be broken\n     *\n     * The pairtable is manipulated in place and a list of tuples\n     * indicating the broken base pairs is returned.\n     */\n    var mm = self.maximumMatching(pt);\n    var newPt = self.backtrackMaximumMatching(mm, pt);\n    var removed = [];\n\n    for (var i = 1; i < pt.length; i++) {\n      if (pt[i] < i) continue;\n\n      if (newPt[i] != pt[i]) {\n        removed.push([i, pt[i]]);\n        pt[pt[i]] = 0;\n        pt[i] = 0;\n      }\n    }\n\n    return removed;\n  };\n\n  self.ptToElements = function (pt, level, i, j, dotBracketBreaks) {\n    /* Convert a pair table to a list of secondary structure \n     * elements:\n     *\n     * [['s',1,[2,3]]\n     *\n     * The 's' indicates that an element can be a stem. It can also be\n     * an interior loop ('i'), a hairpin loop ('h') or a multiloop ('m')\n     *\n     * The second number (1 in this case) indicates the depth or\n     * how many base pairs have to be broken to get to this element.\n     *\n     * Finally, there is the list of nucleotides which are part of\n     * of this element.\n     */\n    var elements = [];\n    var u5 = [i - 1];\n    var u3 = [j + 1];\n    if (arguments.length < 5) dotBracketBreaks = [];\n    if (i > j) return []; //iterate over the unpaired regions on either side\n    //this is either 5' and 3' unpaired if level == 0\n    //or an interior loop or a multiloop\n\n    for (; pt[i] === 0; i++) {\n      u5.push(i);\n    }\n\n    for (; pt[j] === 0; j--) {\n      u3.push(j);\n    }\n\n    if (i > j) {\n      //hairpin loop or one large unpaired molecule\n      u5.push(i);\n      if (level === 0) return [['e', level, u5.sort(numberSort)]];else {\n        // check to see if we have chain breaks due\n        // to multiple strands in the input\n        var external = false;\n        var left = [];\n        var right = [];\n\n        for (var k = 0; k < u5.length; k++) {\n          if (external) right.push(u5[k]);else left.push(u5[k]);\n          if (dotBracketBreaks.indexOf(u5[k]) >= 0) external = true;\n        }\n\n        if (external) {\n          return [['h', level, u5.sort(numberSort)]];\n        } else // if not, this is a simple hairpin loop\n          return [['h', level, u5.sort(numberSort)]];\n      }\n    }\n\n    if (pt[i] != j) {\n      //multiloop\n      var m = u5;\n      var k = i; // the nucleotide before and the starting nucleotide\n\n      m.push(k);\n\n      while (k <= j) {\n        // recurse into a stem\n        elements = elements.concat(self.ptToElements(pt, level, k, pt[k], dotBracketBreaks)); // add the nucleotides between stems\n\n        m.push(pt[k]);\n        k = pt[k] + 1;\n\n        for (; pt[k] === 0 && k <= j; k++) {\n          m.push(k);\n        }\n\n        m.push(k);\n      }\n\n      m.pop();\n      m = m.concat(u3);\n\n      if (m.length > 0) {\n        if (level === 0) elements.push(['e', level, m.sort(numberSort)]);else elements.push(['m', level, m.sort(numberSort)]);\n      }\n\n      return elements;\n    }\n\n    if (pt[i] === j) {\n      //interior loop\n      u5.push(i);\n      u3.push(j);\n      var combined = u5.concat(u3);\n\n      if (combined.length > 4) {\n        if (level === 0) elements.push(['e', level, u5.concat(u3).sort(numberSort)]);else elements.push(['i', level, u5.concat(u3).sort(numberSort)]);\n      }\n    }\n\n    var s = []; //go through the stem\n\n    while (pt[i] === j && i < j) {\n      //one stem\n      s.push(i);\n      s.push(j);\n      i += 1;\n      j -= 1;\n      level += 1;\n    }\n\n    u5 = [i - 1];\n    u3 = [j + 1];\n    elements.push(['s', level, s.sort(numberSort)]);\n    return elements.concat(self.ptToElements(pt, level, i, j, dotBracketBreaks));\n  };\n}\nvar rnaUtilities = new RNAUtilities();\nfunction ColorScheme(colorsText) {\n  var self = this;\n  self.colorsText = colorsText;\n\n  self.parseRange = function (rangeText) {\n    //parse a number range such as 1-10 or 3,7,9 or just 7\n    var parts = rangeText.split(',');\n    var nums = [];\n\n    for (var i = 0; i < parts.length; i++) {\n      //could be 1 or 10-11  or something like that\n      var parts1 = parts[i].split('-');\n      if (parts1.length == 1) nums.push(parseInt(parts1[0]));else if (parts1.length == 2) {\n        var from = parseInt(parts1[0]);\n        var to = parseInt(parts1[1]); // add each number in this range\n\n        for (var j = from; j <= to; j++) {\n          nums.push(j);\n        }\n      } else {\n        console.log('Malformed range (too many dashes):', rangeText);\n      }\n    }\n\n    return nums;\n  };\n\n  self.parseColorText = function (colorText) {\n    /* Parse the text of an RNA color string. Instructions and description\n     * of the format are given below.\n     *\n     * The return is a json double dictionary indexed first by the \n     * molecule name, then by the nucleotide. This is then applied\n     * by force.js to the RNAs it is displaying. When no molecule\n     * name is specified, the color is applied to all molecules*/\n    var lines = colorText.split('\\n');\n    var currMolecule = '';\n    var counter = 1;\n    var colorsJson = {\n      colorValues: {\n        '': {}\n      },\n      range: ['white', 'steelblue']\n    };\n    var domainValues = [];\n\n    for (var i = 0; i < lines.length; i++) {\n      if (lines[i][0] == '>') {\n        // new molecule\n        currMolecule = lines[i].trim().slice(1);\n        counter = 1;\n        colorsJson.colorValues[currMolecule] = {};\n        continue;\n      }\n\n      var words = lines[i].trim().split(/[\\s]+/);\n\n      for (var j = 0; j < words.length; j++) {\n        if (isNaN(words[j])) {\n          if (words[j].search('range') === 0) {\n            //there's a color scale in this entry\n            var _parts = words[j].split('=');\n\n            var partsRight = _parts[1].split(':');\n\n            colorsJson.range = [partsRight[0], partsRight[1]];\n            continue;\n          }\n\n          if (words[j].search('domain') == 0) {\n            //there's a color scale in this entry\n            var _parts2 = words[j].split('=');\n\n            var _partsRight = _parts2[1].split(':');\n\n            colorsJson.domain = [_partsRight[0], _partsRight[1]];\n            continue;\n          } // it's not a number, should be a combination \n          // of a number (nucleotide #) and a color\n\n\n          var parts = words[j].split(':');\n          var nums = self.parseRange(parts[0]);\n          var color = parts[1];\n\n          for (var k = 0; k < nums.length; k++) {\n            if (isNaN(color)) {\n              colorsJson.colorValues[currMolecule][nums[k]] = color;\n            } else {\n              colorsJson.colorValues[currMolecule][nums[k]] = +color;\n              domainValues.push(Number(color));\n            }\n          }\n        } else {\n          //it's a number, so we add it to the list of values\n          //seen for this molecule\n          colorsJson.colorValues[currMolecule][counter] = Number(words[j]);\n          counter += 1;\n          domainValues.push(Number(words[j]));\n        }\n      }\n    }\n\n    if (!('domain' in colorsJson)) colorsJson.domain = [Math.min.apply(null, domainValues), Math.max.apply(null, domainValues)];\n    self.colorsJson = colorsJson;\n    return self;\n  };\n\n  self.normalizeColors = function () {\n    /* \n     * Normalize the passed in values so that they range from\n     * 0 to 1\n     */\n    var value;\n\n    for (var moleculeName in self.colorsJson) {\n      var minNum = Number.MAX_VALUE;\n      var maxNum = Number.MIN_VALUE; // iterate once to find the min and max values;\n\n      for (var resnum in self.colorsJson.colorValues[moleculeName]) {\n        value = self.colorsJson.colorValues[moleculeName][resnum];\n\n        if (typeof value == 'number') {\n          if (value < minNum) minNum = value;\n          if (value > maxNum) maxNum = value;\n        }\n      } // iterate again to normalize\n\n\n      for (resnum in self.colorsJson.colorValues[moleculeName]) {\n        value = self.colorsJson.colorValues[moleculeName][resnum];\n\n        if (typeof value == 'number') {\n          self.colorsJson.colorValues[moleculeName][resnum] = (value - minNum) / (maxNum - minNum);\n        }\n      }\n    }\n\n    return self;\n  };\n\n  self.parseColorText(self.colorsText);\n  return self;\n}\n\n//# sourceURL=webpack://%5Bname%5D/./scripts/rnautils.js?");

/***/ }),

/***/ "./scripts/simplernaplot.js":
/*!**********************************!*\
  !*** ./scripts/simplernaplot.js ***!
  \**********************************/
/*! exports provided: simpleXyCoordinates */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"simpleXyCoordinates\", function() { return simpleXyCoordinates; });\nfunction simpleXyCoordinates(pair_table) {\n  var INIT_ANGLE = 0.;\n  /* initial bending angle */\n\n  var INIT_X = 100.;\n  /* coordinate of first digit */\n\n  var INIT_Y = 100.;\n  /* see above */\n\n  var RADIUS = 15.;\n  var x = [],\n      y = [];\n  var i, len;\n  var alpha;\n  len = pair_table[0];\n  var angle = Array.apply(null, new Array(len + 5)).map(Number.prototype.valueOf, 0);\n  var loop_size = Array.apply(null, new Array(16 + Math.floor(len / 5))).map(Number.prototype.valueOf, 0);\n  var stack_size = Array.apply(null, new Array(16 + Math.floor(len / 5))).map(Number.prototype.valueOf, 0);\n  var lp = 0;\n  var stk = 0;\n  var PIHALF = Math.PI / 2;\n\n  var loop = function loop(i, j, pair_table)\n  /* i, j are the positions AFTER the last pair of a stack; i.e\n     i-1 and j+1 are paired. */\n  {\n    var count = 2;\n    /* counts the VERTICES of a loop polygon; that's\n       NOT necessarily the number of unpaired bases!\n       Upon entry the loop has already 2 vertices, namely\n       the pair i-1/j+1.  */\n\n    var r = 0,\n        bubble = 0;\n    /* bubble counts the unpaired digits in loops */\n\n    var i_old, partner, k, l, start_k, start_l, fill, ladder;\n    var begin, v, diff;\n    var polygon;\n    var remember = Array.apply(null, new Array(3 + Math.floor((j - i) / 5) * 2)).map(Number.prototype.valueOf, 0);\n    i_old = i - 1, j++;\n    /* j has now been set to the partner of the\n       previous pair for correct while-loop\n       termination.  */\n\n    while (i != j) {\n      partner = pair_table[i];\n      if (!partner || i == 0) i++, count++, bubble++;else {\n        count += 2;\n        k = i, l = partner;\n        /* beginning of stack */\n\n        remember[++r] = k;\n        remember[++r] = l;\n        i = partner + 1;\n        /* next i for the current loop */\n\n        start_k = k, start_l = l;\n        ladder = 0;\n\n        do {\n          k++, l--, ladder++;\n          /* go along the stack region */\n        } while (pair_table[k] == l && pair_table[k] > k);\n\n        fill = ladder - 2;\n\n        if (ladder >= 2) {\n          angle[start_k + 1 + fill] += PIHALF;\n          /*  Loop entries and    */\n\n          angle[start_l - 1 - fill] += PIHALF;\n          /*  exits get an        */\n\n          angle[start_k] += PIHALF;\n          /*  additional PI/2.    */\n\n          angle[start_l] += PIHALF;\n          /*  Why ? (exercise)    */\n\n          if (ladder > 2) {\n            for (; fill >= 1; fill--) {\n              angle[start_k + fill] = Math.PI;\n              /*  fill in the angles  */\n\n              angle[start_l - fill] = Math.PI;\n              /*  for the backbone    */\n            }\n          }\n        }\n\n        stack_size[++stk] = ladder;\n        if (k <= l) loop(k, l, pair_table);\n      }\n    }\n\n    polygon = Math.PI * (count - 2) / count;\n    /* bending angle in loop polygon */\n\n    remember[++r] = j;\n    begin = i_old < 0 ? 0 : i_old;\n\n    for (v = 1; v <= r; v++) {\n      diff = remember[v] - begin;\n\n      for (fill = 0; fill <= diff; fill++) {\n        angle[begin + fill] += polygon;\n      }\n\n      if (v > r) break;\n      begin = remember[++v];\n    }\n\n    loop_size[++lp] = bubble;\n  };\n\n  loop(0, len + 1, pair_table);\n  loop_size[lp] -= 2;\n  /* correct for cheating with function loop */\n\n  alpha = INIT_ANGLE;\n  x[0] = INIT_X;\n  y[0] = INIT_Y;\n  var poss = [];\n  poss.push([x[0], y[0]]);\n\n  for (i = 1; i < len; i++) {\n    x[i] = x[i - 1] + RADIUS * Math.cos(alpha);\n    y[i] = y[i - 1] + RADIUS * Math.sin(alpha);\n    poss.push([x[i], y[i]]);\n    alpha += Math.PI - angle[i + 1];\n  }\n\n  return poss;\n}\n\n//# sourceURL=webpack://%5Bname%5D/./scripts/simplernaplot.js?");

/***/ }),

/***/ "./styles/rnaplot.css":
/*!****************************!*\
  !*** ./styles/rnaplot.css ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin\n\n//# sourceURL=webpack://%5Bname%5D/./styles/rnaplot.css?");

/***/ }),

/***/ 0:
/*!**********************************!*\
  !*** multi ./scripts/rnaplot.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./scripts/rnaplot.js */\"./scripts/rnaplot.js\");\n\n\n//# sourceURL=webpack://%5Bname%5D/multi_./scripts/rnaplot.js?");

/***/ })

/******/ });
});